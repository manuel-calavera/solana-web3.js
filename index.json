[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/account.js",
    "content": "// @flow\nimport nacl from 'tweetnacl';\nimport type {KeyPair} from 'tweetnacl';\n\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n */\nexport class Account {\n  _keypair: KeyPair;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey: ?Buffer = null) {\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(secretKey);\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account\n   */\n  get secretKey(): Buffer {\n    return this._keypair.secretKey;\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/account.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "Account",
    "memberof": "src/account.js",
    "static": true,
    "longname": "src/account.js~Account",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{Account}",
    "description": "An account key pair (public and secret keys).",
    "lineNumber": 10,
    "interface": false
  },
  {
    "__docId__": 50,
    "kind": "member",
    "name": "_keypair",
    "memberof": "src/account.js~Account",
    "static": false,
    "longname": "src/account.js~Account#_keypair",
    "access": "private",
    "description": "",
    "lineNumber": 11,
    "type": {
      "nullable": null,
      "types": [
        "KeyPair"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 51,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/account.js~Account",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/account.js~Account#constructor",
    "access": "public",
    "description": "Create a new Account object\n\nIf the secretKey parameter is not provided a new key pair is randomly\ncreated for the account ",
    "lineNumber": 21,
    "params": [
      {
        "nullable": true,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "undefined",
        "defaultRaw": "undefined",
        "name": "secretKey",
        "description": "Secret key for the account"
      }
    ]
  },
  {
    "__docId__": 54,
    "kind": "get",
    "name": "publicKey",
    "memberof": "src/account.js~Account",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/account.js~Account#publicKey",
    "access": "public",
    "description": "The public key for this account ",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "PublicKey"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 55,
    "kind": "get",
    "name": "secretKey",
    "memberof": "src/account.js~Account",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/account.js~Account#secretKey",
    "access": "public",
    "description": "The **unencrypted** secret key for this account ",
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "Buffer"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 56,
    "kind": "file",
    "name": "src/bpf-loader.js",
    "content": "// @flow\n\nimport {Account} from './account';\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport {SystemProgram} from './system-program';\nimport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nimport type {Connection} from './connection';\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Public key that identifies the BpfLoader\n   */\n  static get programId(): PublicKey {\n    return new PublicKey(\n      '0x8000000000000000000000000000000000000000000000000000000000000000',\n    );\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param owner User account to load the program into\n   * @param elfBytes The entire ELF containing the BPF program\n   */\n  static async load(\n    connection: Connection,\n    owner: Account,\n    elf: Array<number>,\n  ): Promise<PublicKey> {\n    const programAccount = new Account();\n\n    const transaction = SystemProgram.createAccount(\n      owner.publicKey,\n      programAccount.publicKey,\n      1 + Math.ceil(elf.length / Loader.chunkSize) + 1,\n      elf.length,\n      BpfLoader.programId,\n    );\n    await sendAndConfirmTransaction(connection, transaction, owner);\n\n    const loader = new Loader(connection, BpfLoader.programId);\n    await loader.load(programAccount, elf);\n    await loader.finalize(programAccount);\n\n    return programAccount.publicKey;\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/bpf-loader.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 57,
    "kind": "class",
    "name": "BpfLoader",
    "memberof": "src/bpf-loader.js",
    "static": true,
    "longname": "src/bpf-loader.js~BpfLoader",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{BpfLoader}",
    "description": "Factory class for transactions to interact with a program loader",
    "lineNumber": 13,
    "interface": false
  },
  {
    "__docId__": 58,
    "kind": "get",
    "name": "programId",
    "memberof": "src/bpf-loader.js~BpfLoader",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/bpf-loader.js~BpfLoader.programId",
    "access": "public",
    "description": "Public key that identifies the BpfLoader ",
    "lineNumber": 17,
    "type": {
      "nullable": null,
      "types": [
        "PublicKey"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 59,
    "kind": "method",
    "name": "load",
    "memberof": "src/bpf-loader.js~BpfLoader",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/bpf-loader.js~BpfLoader.load",
    "access": "public",
    "description": "Load a BPF program  ",
    "lineNumber": 30,
    "params": [
      {
        "nullable": null,
        "types": [
          "Connection"
        ],
        "spread": false,
        "optional": false,
        "name": "connection",
        "description": "The connection to use"
      },
      {
        "nullable": null,
        "types": [
          "Account"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": "User account to load the program into"
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "elf",
        "description": "The entire ELF containing the BPF program"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<PublicKey>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 60,
    "kind": "file",
    "name": "src/budget-program.js",
    "content": "// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\nimport {Transaction} from './transaction';\nimport {PublicKey} from './publickey';\nimport * as Layout from './layout';\n\n/**\n * Represents a condition that is met by executing a `applySignature()`\n * transaction\n *\n * @typedef {Object} SignatureCondition\n * @property {string} type Must equal the string 'timestamp'\n * @property {PublicKey} from Public key from which `applySignature()` will be accepted from\n */\nexport type SignatureCondition = {\n  type: 'signature',\n  from: PublicKey,\n};\n\n/**\n * Represents a condition that is met by executing a `applyTimestamp()`\n * transaction\n *\n * @typedef {Object} TimestampCondition\n * @property {string} type Must equal the string 'timestamp'\n * @property {PublicKey} from Public key from which `applyTimestamp()` will be accepted from\n * @property {Date} when The timestamp that was observed\n */\nexport type TimestampCondition = {\n  type: 'timestamp',\n  from: PublicKey,\n  when: Date,\n};\n\n/**\n * Represents a payment to a given public key\n *\n * @typedef {Object} Payment\n * @property {number} amount Number of tokens\n * @property {PublicKey} to Public key of the recipient\n */\nexport type Payment = {\n  amount: number,\n  to: PublicKey,\n};\n\n/**\n * A condition that can unlock a payment\n *\n * @typedef {SignatureCondition|TimestampCondition} BudgetCondition\n */\nexport type BudgetCondition = SignatureCondition | TimestampCondition;\n\n/**\n * @private\n */\nfunction serializePayment(payment: Payment): Buffer {\n  const toData = payment.to.toBuffer();\n  const userdata = Buffer.alloc(8 + toData.length);\n  userdata.writeUInt32LE(payment.amount, 0);\n  toData.copy(userdata, 8);\n  return userdata;\n}\n\n/**\n * @private\n */\nfunction serializeDate(when: Date): Buffer {\n  const userdata = Buffer.alloc(8 + 20);\n  userdata.writeUInt32LE(20, 0); // size of timestamp as u64\n\n  function iso(date) {\n    function pad(number) {\n      if (number < 10) {\n        return '0' + number;\n      }\n      return number;\n    }\n\n    return (\n      date.getUTCFullYear() +\n      '-' +\n      pad(date.getUTCMonth() + 1) +\n      '-' +\n      pad(date.getUTCDate()) +\n      'T' +\n      pad(date.getUTCHours()) +\n      ':' +\n      pad(date.getUTCMinutes()) +\n      ':' +\n      pad(date.getUTCSeconds()) +\n      'Z'\n    );\n  }\n  userdata.write(iso(when), 8);\n  return userdata;\n}\n\n/**\n * @private\n */\nfunction serializeCondition(condition: BudgetCondition) {\n  switch (condition.type) {\n    case 'timestamp': {\n      const date = serializeDate(condition.when);\n      const from = condition.from.toBuffer();\n\n      const userdata = Buffer.alloc(4 + date.length + from.length);\n      userdata.writeUInt32LE(0, 0); // Condition enum = Timestamp\n      date.copy(userdata, 4);\n      from.copy(userdata, 4 + date.length);\n      return userdata;\n    }\n    case 'signature': {\n      const userdataLayout = BufferLayout.struct([\n        BufferLayout.u32('condition'),\n        Layout.publicKey('from'),\n      ]);\n\n      const from = condition.from.toBuffer();\n      const userdata = Buffer.alloc(4 + from.length);\n      userdataLayout.encode(\n        {\n          instruction: 1, // Signature\n          from,\n        },\n        userdata,\n      );\n      return userdata;\n    }\n    default:\n      throw new Error(`Unknown condition type: ${condition.type}`);\n  }\n}\n\n/**\n * Factory class for transactions to interact with the Budget program\n */\nexport class BudgetProgram {\n  /**\n   * Public key that identifies the Budget program\n   */\n  static get programId(): PublicKey {\n    return new PublicKey(\n      '0x8100000000000000000000000000000000000000000000000000000000000000',\n    );\n  }\n\n  /**\n   * The amount of space this program requires\n   */\n  static get space(): number {\n    return 128;\n  }\n\n  /**\n   * Creates a timestamp condition\n   */\n  static timestampCondition(from: PublicKey, when: Date): TimestampCondition {\n    return {\n      type: 'timestamp',\n      from,\n      when,\n    };\n  }\n\n  /**\n   * Creates a signature condition\n   */\n  static signatureCondition(from: PublicKey): SignatureCondition {\n    return {\n      type: 'signature',\n      from,\n    };\n  }\n\n  /**\n   * Generates a transaction that transfers tokens once any of the conditions are met\n   */\n  static pay(\n    from: PublicKey,\n    program: PublicKey,\n    to: PublicKey,\n    amount: number,\n    ...conditions: Array<BudgetCondition>\n  ): Transaction {\n    const userdata = Buffer.alloc(1024);\n    let pos = 0;\n    userdata.writeUInt32LE(0, pos); // NewBudget instruction\n    pos += 4;\n\n    switch (conditions.length) {\n      case 0:\n        userdata.writeUInt32LE(0, pos); // Budget enum = Pay\n        pos += 4;\n\n        {\n          const payment = serializePayment({amount, to});\n          payment.copy(userdata, pos);\n          pos += payment.length;\n        }\n\n        return new Transaction().add({\n          keys: [from, to],\n          programId: this.programId,\n          userdata: userdata.slice(0, pos),\n        });\n      case 1:\n        userdata.writeUInt32LE(1, pos); // Budget enum = After\n        pos += 4;\n        {\n          const condition = conditions[0];\n\n          const conditionData = serializeCondition(condition);\n          conditionData.copy(userdata, pos);\n          pos += conditionData.length;\n\n          const paymentData = serializePayment({amount, to});\n          paymentData.copy(userdata, pos);\n          pos += paymentData.length;\n        }\n\n        return new Transaction().add({\n          keys: [from, program, to],\n          programId: this.programId,\n          userdata: userdata.slice(0, pos),\n        });\n\n      case 2:\n        userdata.writeUInt32LE(2, pos); // Budget enum = Or\n        pos += 4;\n\n        for (let condition of conditions) {\n          const conditionData = serializeCondition(condition);\n          conditionData.copy(userdata, pos);\n          pos += conditionData.length;\n\n          const paymentData = serializePayment({amount, to});\n          paymentData.copy(userdata, pos);\n          pos += paymentData.length;\n        }\n\n        return new Transaction().add({\n          keys: [from, program, to],\n          programId: this.programId,\n          userdata: userdata.slice(0, pos),\n        });\n\n      default:\n        throw new Error(\n          `A maximum of two conditions are support: ${\n            conditions.length\n          } provided`,\n        );\n    }\n  }\n\n  /**\n   * Generates a transaction that transfers tokens once both conditions are met\n   */\n  static payOnBoth(\n    from: PublicKey,\n    program: PublicKey,\n    to: PublicKey,\n    amount: number,\n    condition1: BudgetCondition,\n    condition2: BudgetCondition,\n  ): Transaction {\n    const userdata = Buffer.alloc(1024);\n    let pos = 0;\n    userdata.writeUInt32LE(0, pos); // NewBudget instruction\n    pos += 4;\n\n    userdata.writeUInt32LE(3, pos); // Budget enum = And\n    pos += 4;\n\n    for (let condition of [condition1, condition2]) {\n      const conditionData = serializeCondition(condition);\n      conditionData.copy(userdata, pos);\n      pos += conditionData.length;\n    }\n\n    const paymentData = serializePayment({amount, to});\n    paymentData.copy(userdata, pos);\n    pos += paymentData.length;\n\n    return new Transaction().add({\n      keys: [from, program, to],\n      programId: this.programId,\n      userdata: userdata.slice(0, pos),\n    });\n  }\n\n  /**\n   * Generates a transaction that applies a timestamp, which could enable a\n   * pending payment to proceed.\n   */\n  static applyTimestamp(\n    from: PublicKey,\n    program: PublicKey,\n    to: PublicKey,\n    when: Date,\n  ): Transaction {\n    const whenData = serializeDate(when);\n    const userdata = Buffer.alloc(4 + whenData.length);\n\n    userdata.writeUInt32LE(1, 0); // ApplyTimestamp instruction\n    whenData.copy(userdata, 4);\n\n    return new Transaction().add({\n      keys: [from, program, to],\n      programId: this.programId,\n      userdata,\n    });\n  }\n\n  /**\n   * Generates a transaction that applies a signature, which could enable a\n   * pending payment to proceed.\n   */\n  static applySignature(\n    from: PublicKey,\n    program: PublicKey,\n    to: PublicKey,\n  ): Transaction {\n    const userdataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n    ]);\n\n    const userdata = Buffer.alloc(userdataLayout.span);\n    userdataLayout.encode(\n      {\n        instruction: 2, // ApplySignature instruction\n      },\n      userdata,\n    );\n\n    return new Transaction().add({\n      keys: [from, program, to],\n      programId: this.programId,\n      userdata,\n    });\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/budget-program.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 61,
    "kind": "typedef",
    "name": "SignatureCondition",
    "memberof": "src/budget-program.js",
    "static": true,
    "longname": "src/budget-program.js~SignatureCondition",
    "access": "public",
    "description": "Represents a condition that is met by executing a `applySignature()`\ntransaction",
    "lineNumber": 17,
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "Must equal the string 'timestamp'"
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "from",
        "description": "Public key from which `applySignature()` will be accepted from"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "SignatureCondition"
    }
  },
  {
    "__docId__": 62,
    "kind": "typedef",
    "name": "TimestampCondition",
    "memberof": "src/budget-program.js",
    "static": true,
    "longname": "src/budget-program.js~TimestampCondition",
    "access": "public",
    "description": "Represents a condition that is met by executing a `applyTimestamp()`\ntransaction",
    "lineNumber": 31,
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "Must equal the string 'timestamp'"
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "from",
        "description": "Public key from which `applyTimestamp()` will be accepted from"
      },
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "when",
        "description": "The timestamp that was observed"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "TimestampCondition"
    }
  },
  {
    "__docId__": 63,
    "kind": "typedef",
    "name": "Payment",
    "memberof": "src/budget-program.js",
    "static": true,
    "longname": "src/budget-program.js~Payment",
    "access": "public",
    "description": "Represents a payment to a given public key",
    "lineNumber": 44,
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": "Number of tokens"
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "to",
        "description": "Public key of the recipient"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Payment"
    }
  },
  {
    "__docId__": 64,
    "kind": "typedef",
    "name": "BudgetCondition",
    "memberof": "src/budget-program.js",
    "static": true,
    "longname": "src/budget-program.js~BudgetCondition",
    "access": "public",
    "description": "A condition that can unlock a payment",
    "lineNumber": 54,
    "type": {
      "types": [
        "SignatureCondition",
        "TimestampCondition"
      ],
      "optional": false,
      "name": "BudgetCondition"
    }
  },
  {
    "__docId__": 65,
    "kind": "function",
    "name": "serializePayment",
    "memberof": "src/budget-program.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/budget-program.js~serializePayment",
    "access": "private",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "  ",
    "lineNumber": 59,
    "params": [
      {
        "nullable": null,
        "types": [
          "Payment"
        ],
        "spread": false,
        "optional": false,
        "name": "payment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Buffer"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 66,
    "kind": "function",
    "name": "serializeDate",
    "memberof": "src/budget-program.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/budget-program.js~serializeDate",
    "access": "private",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "  ",
    "lineNumber": 70,
    "params": [
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "when",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Buffer"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 67,
    "kind": "function",
    "name": "serializeCondition",
    "memberof": "src/budget-program.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/budget-program.js~serializeCondition",
    "access": "private",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": " ",
    "lineNumber": 104,
    "params": [
      {
        "nullable": null,
        "types": [
          "BudgetCondition"
        ],
        "spread": false,
        "optional": false,
        "name": "condition",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "class",
    "name": "BudgetProgram",
    "memberof": "src/budget-program.js",
    "static": true,
    "longname": "src/budget-program.js~BudgetProgram",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{BudgetProgram}",
    "description": "Factory class for transactions to interact with the Budget program",
    "lineNumber": 141,
    "interface": false
  },
  {
    "__docId__": 69,
    "kind": "get",
    "name": "programId",
    "memberof": "src/budget-program.js~BudgetProgram",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/budget-program.js~BudgetProgram.programId",
    "access": "public",
    "description": "Public key that identifies the Budget program ",
    "lineNumber": 145,
    "type": {
      "nullable": null,
      "types": [
        "PublicKey"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 70,
    "kind": "get",
    "name": "space",
    "memberof": "src/budget-program.js~BudgetProgram",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/budget-program.js~BudgetProgram.space",
    "access": "public",
    "description": "The amount of space this program requires ",
    "lineNumber": 154,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "timestampCondition",
    "memberof": "src/budget-program.js~BudgetProgram",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/budget-program.js~BudgetProgram.timestampCondition",
    "access": "public",
    "description": "Creates a timestamp condition  ",
    "lineNumber": 161,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "from",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "when",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TimestampCondition"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 72,
    "kind": "method",
    "name": "signatureCondition",
    "memberof": "src/budget-program.js~BudgetProgram",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/budget-program.js~BudgetProgram.signatureCondition",
    "access": "public",
    "description": "Creates a signature condition  ",
    "lineNumber": 172,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "from",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SignatureCondition"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "pay",
    "memberof": "src/budget-program.js~BudgetProgram",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/budget-program.js~BudgetProgram.pay",
    "access": "public",
    "description": "Generates a transaction that transfers tokens once any of the conditions are met  ",
    "lineNumber": 182,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "from",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "program",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "to",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "...Array<BudgetCondition>"
        ],
        "spread": true,
        "optional": false,
        "name": "conditions",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Transaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 74,
    "kind": "method",
    "name": "payOnBoth",
    "memberof": "src/budget-program.js~BudgetProgram",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/budget-program.js~BudgetProgram.payOnBoth",
    "access": "public",
    "description": "Generates a transaction that transfers tokens once both conditions are met  ",
    "lineNumber": 263,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "from",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "program",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "to",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "BudgetCondition"
        ],
        "spread": false,
        "optional": false,
        "name": "condition1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "BudgetCondition"
        ],
        "spread": false,
        "optional": false,
        "name": "condition2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Transaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "applyTimestamp",
    "memberof": "src/budget-program.js~BudgetProgram",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/budget-program.js~BudgetProgram.applyTimestamp",
    "access": "public",
    "description": "Generates a transaction that applies a timestamp, which could enable a\npending payment to proceed.  ",
    "lineNumber": 300,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "from",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "program",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "to",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "when",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Transaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "applySignature",
    "memberof": "src/budget-program.js~BudgetProgram",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/budget-program.js~BudgetProgram.applySignature",
    "access": "public",
    "description": "Generates a transaction that applies a signature, which could enable a\npending payment to proceed.  ",
    "lineNumber": 323,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "from",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "program",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "to",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Transaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 77,
    "kind": "file",
    "name": "src/connection.js",
    "content": "// @flow\n\nimport assert from 'assert';\nimport {parse as urlParse, format as urlFormat} from 'url';\nimport fetch from 'node-fetch';\nimport jayson from 'jayson/lib/client/browser';\nimport {struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\n\nimport {Transaction} from './transaction';\nimport {PublicKey} from './publickey';\nimport {sleep} from './util/sleep';\nimport type {Account} from './account';\nimport type {TransactionSignature, TransactionId} from './transaction';\n\ntype RpcRequest = (methodName: string, args: Array<any>) => any;\n\nfunction createRpcRequest(url): RpcRequest {\n  const server = jayson(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n    try {\n      const res = await fetch(url, options);\n      const text = await res.text();\n      callback(null, text);\n    } catch (err) {\n      callback(err);\n    }\n  });\n\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      server.request(method, args, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getBalance\" message\n */\nconst GetBalanceRpcResult = struct({\n  jsonrpc: struct.literal('2.0'),\n  id: 'string',\n  error: 'any?',\n  result: 'number?',\n});\n\n/**\n * @private\n */\nfunction jsonRpcResult(resultDescription: any) {\n  const jsonRpcVersion = struct.literal('2.0');\n  return struct.union([\n    struct({\n      jsonrpc: jsonRpcVersion,\n      id: 'string',\n      error: 'any',\n    }),\n    struct({\n      jsonrpc: jsonRpcVersion,\n      id: 'string',\n      error: 'null?',\n      result: resultDescription,\n    }),\n  ]);\n}\n\n/**\n * @private\n */\nconst AccountInfoResult = struct({\n  executable: 'boolean',\n  loader: 'array',\n  owner: 'array',\n  tokens: 'number',\n  userdata: 'array',\n});\n\n/**\n * Expected JSON RPC response for the \"getAccountInfo\" message\n */\nconst GetAccountInfoRpcResult = jsonRpcResult(AccountInfoResult);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = struct({\n  subscription: 'number',\n  result: AccountInfoResult,\n});\n\n/**\n * Expected JSON RPC response for the \"confirmTransaction\" message\n */\nconst ConfirmTransactionRpcResult = jsonRpcResult('boolean');\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatus\" message\n */\nconst GetSignatureStatusRpcResult = jsonRpcResult(\n  struct.enum([\n    'AccountInUse',\n    'Confirmed',\n    'GenericFailure',\n    'ProgramRuntimeError',\n    'SignatureNotFound',\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransactionCount\" message\n */\nconst GetTransactionCountRpcResult = jsonRpcResult('number');\n\n/**\n * Expected JSON RPC response for the \"getLastId\" message\n */\nconst GetLastId = jsonRpcResult('string');\n\n/**\n * Expected JSON RPC response for the \"getFinality\" message\n */\nconst GetFinalityRpcResult = jsonRpcResult('number');\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult('string');\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult('string');\n\n/**\n * Information describing an account\n *\n * @typedef {Object} AccountInfo\n * @property {number} tokens Number of tokens assigned to the account\n * @property {PublicKey} owner Identifier of the program that owns the account\n * @property {?Buffer} userdata Optional userdata assigned to the account\n * @property {PublicKey} loader Identifier of the loader for this account\n * @property {boolean} executable `true` if this account's userdata contains a loaded program\n */\ntype AccountInfo = {\n  executable: boolean,\n  loader: PublicKey,\n  owner: PublicKey,\n  tokens: number,\n  userdata: Buffer,\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (accountInfo: AccountInfo) => void;\n\n/**\n * @private\n */\ntype AccountSubscriptionInfo = {\n  publicKey: string, // PublicKey of the account as a base 58 string\n  callback: AccountChangeCallback,\n  subscriptionId: null | number, // null when there's no current server subscription id\n};\n\n/**\n * Possible signature status values\n *\n * @typedef {string} SignatureStatus\n */\nexport type SignatureStatus =\n  | 'Confirmed'\n  | 'AccountInUse'\n  | 'SignatureNotFound'\n  | 'ProgramRuntimeError'\n  | 'GenericFailure';\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  _rpcRequest: RpcRequest;\n  _rpcWebSocket: RpcWebSocketClient;\n  _rpcWebSocketConnected: boolean = false;\n\n  _lastIdInfo: {\n    lastId: TransactionId | null,\n    seconds: number,\n    transactionSignatures: Array<string>,\n  };\n  _disableLastIdCaching: boolean = false;\n  _accountChangeSubscriptions: {[number]: AccountSubscriptionInfo} = {};\n  _accountChangeSubscriptionCounter: number = 0;\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   */\n  constructor(endpoint: string) {\n    let url = urlParse(endpoint);\n\n    this._rpcRequest = createRpcRequest(url.href);\n    this._lastIdInfo = {\n      lastId: null,\n      seconds: -1,\n      transactionSignatures: [],\n    };\n\n    url.protocol = url.protocol === 'https:' ? 'wss:' : 'ws:';\n    url.host = '';\n    url.port = String(Number(url.port) + 1);\n    if (url.port === '1') {\n      url.port = url.protocol === 'wss:' ? '8901' : '8900';\n    }\n    this._rpcWebSocket = new RpcWebSocketClient(urlFormat(url), {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(publicKey: PublicKey): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getBalance', [\n      publicKey.toBase58(),\n    ]);\n    const res = GetBalanceRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(publicKey: PublicKey): Promise<AccountInfo> {\n    const unsafeRes = await this._rpcRequest('getAccountInfo', [\n      publicKey.toBase58(),\n    ]);\n    const res = GetAccountInfoRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n\n    const {result} = res;\n    assert(typeof result !== 'undefined');\n\n    return {\n      executable: result.executable,\n      loader: new PublicKey(result.loader),\n      owner: new PublicKey(result.owner),\n      tokens: result.tokens,\n      userdata: Buffer.from(result.userdata),\n    };\n  }\n\n  /**\n   * Confirm the transaction identified by the specified signature\n   */\n  async confirmTransaction(signature: TransactionSignature): Promise<boolean> {\n    const unsafeRes = await this._rpcRequest('confirmTransaction', [signature]);\n    const res = ConfirmTransactionRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the network\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n  ): Promise<SignatureStatus> {\n    const unsafeRes = await this._rpcRequest('getSignatureStatus', [signature]);\n    const res = GetSignatureStatusRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the network\n   */\n  async getTransactionCount(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getTransactionCount', []);\n    const res = GetTransactionCountRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return Number(res.result);\n  }\n\n  /**\n   * Fetch the identifier to the latest transaction on the network\n   */\n  async getLastId(): Promise<TransactionId> {\n    const unsafeRes = await this._rpcRequest('getLastId', []);\n    const res = GetLastId(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Return the current network finality time in millliseconds\n   */\n  async getFinality(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFinality', []);\n    const res = GetFinalityRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return Number(res.result);\n  }\n\n  /**\n   * Request an allocation of tokens to the specified account\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    amount: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      amount,\n    ]);\n    const res = RequestAirdropRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   */\n  async sendTransaction(\n    transaction: Transaction,\n    ...signers: Array<Account>\n  ): Promise<TransactionSignature> {\n    for (;;) {\n      // Attempt to use the previous last id for up to 1 second\n      const seconds = new Date().getSeconds();\n      if (\n        this._lastIdInfo.lastId != null &&\n        this._lastIdInfo.seconds === seconds\n      ) {\n        transaction.lastId = this._lastIdInfo.lastId;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        // If the signature of this transaction has not been seen before with the\n        // current lastId, all done.\n        const signature = transaction.signature.toString();\n        if (!this._lastIdInfo.transactionSignatures.includes(signature)) {\n          this._lastIdInfo.transactionSignatures.push(signature);\n          if (this._disableLastIdCaching) {\n            this._lastIdInfo.seconds = -1;\n          }\n          break;\n        }\n      }\n\n      // Fetch a new last id\n      let attempts = 0;\n      const startTime = Date.now();\n      for (;;) {\n        const lastId = await this.getLastId();\n\n        if (this._lastIdInfo.lastId != lastId) {\n          this._lastIdInfo = {\n            lastId,\n            seconds: new Date().getSeconds(),\n            transactionSignatures: [],\n          };\n          break;\n        }\n        if (attempts === 8) {\n          throw new Error(\n            `Unable to obtain a new last id after ${Date.now() - startTime}ms`,\n          );\n        }\n        await sleep(250);\n        ++attempts;\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('sendTransaction', [\n      [...rawTransaction],\n    ]);\n    const res = SendTransactionRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    assert(res.result);\n    return res.result;\n  }\n\n  /**\n   * @private\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @private\n   */\n  _wsOnError(err: Error) {\n    console.log('ws error:', err.message);\n  }\n\n  /**\n   * @private\n   */\n  _wsOnClose(code: number, message: string) {\n    // 1000 means _rpcWebSocket.close() was called explicitly\n    if (code !== 1000) {\n      console.log('ws close:', code, message);\n    }\n    this._rpcWebSocketConnected = false;\n  }\n\n  /**\n   * @private\n   */\n  _wsOnAccountNotification(notification: Object) {\n    const res = AccountNotificationResult(notification);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n\n    const keys = Object.keys(this._accountChangeSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._accountChangeSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        const {result} = res;\n        assert(typeof result !== 'undefined');\n\n        sub.callback({\n          executable: result.executable,\n          loader: new PublicKey(result.loader),\n          owner: new PublicKey(result.owner),\n          tokens: result.tokens,\n          userdata: Buffer.from(result.userdata),\n        });\n        return true;\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  async _updateSubscriptions() {\n    const keys = Object.keys(this._accountChangeSubscriptions).map(Number);\n    if (keys.length === 0) {\n      this._rpcWebSocket.close();\n      return;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      for (let id of keys) {\n        this._accountChangeSubscriptions[id].subscriptionId = null;\n      }\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    for (let id of keys) {\n      const {subscriptionId, publicKey} = this._accountChangeSubscriptions[id];\n      if (subscriptionId === null) {\n        try {\n          this._accountChangeSubscriptions[\n            id\n          ].subscriptionId = await this._rpcWebSocket.call('accountSubscribe', [\n            publicKey,\n          ]);\n        } catch (err) {\n          console.log(\n            `accountSubscribe error for ${publicKey}: ${err.message}`,\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publickey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n  ): number {\n    const id = ++this._accountChangeSubscriptionCounter;\n    this._accountChangeSubscriptions[id] = {\n      publicKey: publicKey.toBase58(),\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeAccountChangeListener(id: number): Promise<void> {\n    if (this._accountChangeSubscriptions[id]) {\n      const {subscriptionId} = this._accountChangeSubscriptions[id];\n      delete this._accountChangeSubscriptions[id];\n      if (subscriptionId !== null) {\n        try {\n          await this._rpcWebSocket.call('accountUnsubscribe', [subscriptionId]);\n        } catch (err) {\n          console.log('accountUnsubscribe error:', err.message);\n        }\n      }\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown account change id: ${id}`);\n    }\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/connection.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 78,
    "kind": "function",
    "name": "createRpcRequest",
    "memberof": "src/connection.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/connection.js~createRpcRequest",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": " ",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "RpcRequest"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 79,
    "kind": "variable",
    "name": "GetBalanceRpcResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetBalanceRpcResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"getBalance\" message",
    "lineNumber": 53,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 80,
    "kind": "function",
    "name": "jsonRpcResult",
    "memberof": "src/connection.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/connection.js~jsonRpcResult",
    "access": "private",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": " ",
    "lineNumber": 63,
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "resultDescription",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 81,
    "kind": "variable",
    "name": "AccountInfoResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~AccountInfoResult",
    "access": "private",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "",
    "lineNumber": 83,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 82,
    "kind": "variable",
    "name": "GetAccountInfoRpcResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetAccountInfoRpcResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"getAccountInfo\" message",
    "lineNumber": 94,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 83,
    "kind": "variable",
    "name": "AccountNotificationResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~AccountNotificationResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"accountNotification\" message",
    "lineNumber": 99,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 84,
    "kind": "variable",
    "name": "ConfirmTransactionRpcResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~ConfirmTransactionRpcResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"confirmTransaction\" message",
    "lineNumber": 107,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 85,
    "kind": "variable",
    "name": "GetSignatureStatusRpcResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetSignatureStatusRpcResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"getSignatureStatus\" message",
    "lineNumber": 112,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 86,
    "kind": "variable",
    "name": "GetTransactionCountRpcResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetTransactionCountRpcResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"getTransactionCount\" message",
    "lineNumber": 125,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 87,
    "kind": "variable",
    "name": "GetLastId",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetLastId",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"getLastId\" message",
    "lineNumber": 130,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 88,
    "kind": "variable",
    "name": "GetFinalityRpcResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetFinalityRpcResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"getFinality\" message",
    "lineNumber": 135,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 89,
    "kind": "variable",
    "name": "RequestAirdropRpcResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~RequestAirdropRpcResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"requestAirdrop\" message",
    "lineNumber": 140,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 90,
    "kind": "variable",
    "name": "SendTransactionRpcResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~SendTransactionRpcResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"sendTransaction\" message",
    "lineNumber": 145,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 91,
    "kind": "typedef",
    "name": "AccountInfo",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~AccountInfo",
    "access": "public",
    "description": "Information describing an account",
    "lineNumber": 157,
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "tokens",
        "description": "Number of tokens assigned to the account"
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": "Identifier of the program that owns the account"
      },
      {
        "nullable": true,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "userdata",
        "description": "Optional userdata assigned to the account"
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "loader",
        "description": "Identifier of the loader for this account"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "executable",
        "description": "`true` if this account's userdata contains a loaded program"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "AccountInfo"
    }
  },
  {
    "__docId__": 92,
    "kind": "typedef",
    "name": "SignatureStatus",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~SignatureStatus",
    "access": "public",
    "description": "Possible signature status values",
    "lineNumber": 184,
    "type": {
      "types": [
        "string"
      ],
      "optional": false,
      "name": "SignatureStatus"
    }
  },
  {
    "__docId__": 93,
    "kind": "class",
    "name": "Connection",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~Connection",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{Connection}",
    "description": "A connection to a fullnode JSON RPC endpoint",
    "lineNumber": 194,
    "interface": false
  },
  {
    "__docId__": 94,
    "kind": "member",
    "name": "_rpcRequest",
    "memberof": "src/connection.js~Connection",
    "static": false,
    "longname": "src/connection.js~Connection#_rpcRequest",
    "access": "private",
    "description": "",
    "lineNumber": 195,
    "type": {
      "nullable": null,
      "types": [
        "RpcRequest"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 95,
    "kind": "member",
    "name": "_rpcWebSocket",
    "memberof": "src/connection.js~Connection",
    "static": false,
    "longname": "src/connection.js~Connection#_rpcWebSocket",
    "access": "private",
    "description": "",
    "lineNumber": 196,
    "type": {
      "nullable": null,
      "types": [
        "RpcWebSocketClient"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 96,
    "kind": "member",
    "name": "_rpcWebSocketConnected",
    "memberof": "src/connection.js~Connection",
    "static": false,
    "longname": "src/connection.js~Connection#_rpcWebSocketConnected",
    "access": "private",
    "description": "",
    "lineNumber": 197,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 97,
    "kind": "member",
    "name": "_lastIdInfo",
    "memberof": "src/connection.js~Connection",
    "static": false,
    "longname": "src/connection.js~Connection#_lastIdInfo",
    "access": "private",
    "description": "",
    "lineNumber": 199,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 98,
    "kind": "member",
    "name": "_disableLastIdCaching",
    "memberof": "src/connection.js~Connection",
    "static": false,
    "longname": "src/connection.js~Connection#_disableLastIdCaching",
    "access": "private",
    "description": "",
    "lineNumber": 204,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 99,
    "kind": "member",
    "name": "_accountChangeSubscriptions",
    "memberof": "src/connection.js~Connection",
    "static": false,
    "longname": "src/connection.js~Connection#_accountChangeSubscriptions",
    "access": "private",
    "description": "",
    "lineNumber": 205,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 100,
    "kind": "member",
    "name": "_accountChangeSubscriptionCounter",
    "memberof": "src/connection.js~Connection",
    "static": false,
    "longname": "src/connection.js~Connection#_accountChangeSubscriptionCounter",
    "access": "private",
    "description": "",
    "lineNumber": 206,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 101,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/connection.js~Connection#constructor",
    "access": "public",
    "description": "Establish a JSON RPC connection ",
    "lineNumber": 213,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "endpoint",
        "description": "URL to the fullnode JSON RPC endpoint"
      }
    ]
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "getBalance",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getBalance",
    "access": "public",
    "description": "Fetch the balance for the specified public key  ",
    "lineNumber": 245,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "publicKey",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "getAccountInfo",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getAccountInfo",
    "access": "public",
    "description": "Fetch all the account info for the specified public key  ",
    "lineNumber": 260,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "publicKey",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<AccountInfo>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 107,
    "kind": "method",
    "name": "confirmTransaction",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#confirmTransaction",
    "access": "public",
    "description": "Confirm the transaction identified by the specified signature  ",
    "lineNumber": 284,
    "params": [
      {
        "nullable": null,
        "types": [
          "TransactionSignature"
        ],
        "spread": false,
        "optional": false,
        "name": "signature",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<boolean>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "getSignatureStatus",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getSignatureStatus",
    "access": "public",
    "description": "Fetch the current transaction count of the network  ",
    "lineNumber": 297,
    "params": [
      {
        "nullable": null,
        "types": [
          "TransactionSignature"
        ],
        "spread": false,
        "optional": false,
        "name": "signature",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<SignatureStatus>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "getTransactionCount",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getTransactionCount",
    "access": "public",
    "description": "Fetch the current transaction count of the network  ",
    "lineNumber": 312,
    "return": {
      "nullable": null,
      "types": [
        "Promise<number>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 110,
    "kind": "method",
    "name": "getLastId",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getLastId",
    "access": "public",
    "description": "Fetch the identifier to the latest transaction on the network  ",
    "lineNumber": 325,
    "return": {
      "nullable": null,
      "types": [
        "Promise<TransactionId>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 111,
    "kind": "method",
    "name": "getFinality",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getFinality",
    "access": "public",
    "description": "Return the current network finality time in millliseconds  ",
    "lineNumber": 338,
    "return": {
      "nullable": null,
      "types": [
        "Promise<number>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 112,
    "kind": "method",
    "name": "requestAirdrop",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#requestAirdrop",
    "access": "public",
    "description": "Request an allocation of tokens to the specified account  ",
    "lineNumber": 351,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "to",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<TransactionSignature>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 113,
    "kind": "method",
    "name": "sendTransaction",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#sendTransaction",
    "access": "public",
    "description": "Sign and send a transaction  ",
    "lineNumber": 370,
    "params": [
      {
        "nullable": null,
        "types": [
          "Transaction"
        ],
        "spread": false,
        "optional": false,
        "name": "transaction",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "...Array<Account>"
        ],
        "spread": true,
        "optional": false,
        "name": "signers",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<TransactionSignature>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 115,
    "kind": "method",
    "name": "sendRawTransaction",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#sendRawTransaction",
    "access": "public",
    "description": "Send a transaction that has already been signed and serialized into the\nwire format  ",
    "lineNumber": 431,
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "rawTransaction",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<TransactionSignature>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 116,
    "kind": "method",
    "name": "_wsOnOpen",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/connection.js~Connection#_wsOnOpen",
    "access": "private",
    "description": " ",
    "lineNumber": 449,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 118,
    "kind": "method",
    "name": "_wsOnError",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/connection.js~Connection#_wsOnError",
    "access": "private",
    "description": " ",
    "lineNumber": 457,
    "params": [
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "err",
        "description": ""
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 119,
    "kind": "method",
    "name": "_wsOnClose",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/connection.js~Connection#_wsOnClose",
    "access": "private",
    "description": " ",
    "lineNumber": 464,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": ""
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 121,
    "kind": "method",
    "name": "_wsOnAccountNotification",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/connection.js~Connection#_wsOnAccountNotification",
    "access": "private",
    "description": " ",
    "lineNumber": 475,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "notification",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 122,
    "kind": "method",
    "name": "_updateSubscriptions",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#_updateSubscriptions",
    "access": "private",
    "description": " ",
    "lineNumber": 503,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 123,
    "kind": "method",
    "name": "onAccountChange",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/connection.js~Connection#onAccountChange",
    "access": "public",
    "description": "Register a callback to be invoked whenever the specified account changes  ",
    "lineNumber": 543,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "publicKey",
        "description": "Public key of the account to monitor"
      },
      {
        "nullable": null,
        "types": [
          "AccountChangeCallback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Function to invoke whenever the account is changed"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "subscription id"
    }
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "removeAccountChangeListener",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#removeAccountChangeListener",
    "access": "public",
    "description": "Deregister an account notification callback  ",
    "lineNumber": 562,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "subscription id to deregister"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 125,
    "kind": "file",
    "name": "src/index.js",
    "content": "// @flow\nexport {Account} from './account';\nexport {BpfLoader} from './bpf-loader';\nexport {BudgetProgram} from './budget-program';\nexport {Connection} from './connection';\nexport {Loader} from './loader';\nexport {NativeLoader} from './native-loader';\nexport {PublicKey} from './publickey';\nexport {SystemProgram} from './system-program';\nexport {Token, TokenAmount} from './token-program';\nexport {Transaction, TransactionInstruction} from './transaction';\nexport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nexport {\n  sendAndConfirmRawTransaction,\n} from './util/send-and-confirm-raw-transaction';\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 126,
    "kind": "file",
    "name": "src/layout.js",
    "content": "// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey'): Object => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64'): Object => {\n  return BufferLayout.blob(8, property);\n};\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (property: string = 'string') => {\n  const rsl = BufferLayout.struct(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  rsl.decode = (buffer, offset) => {\n    const data = _decode(buffer, offset);\n    return data.chars.toString('utf8');\n  };\n\n  rsl.encode = (str, buffer, offset) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, buffer, offset);\n  };\n\n  return rsl;\n};\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/layout.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 127,
    "kind": "function",
    "name": "publicKey",
    "memberof": "src/layout.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/layout.js~publicKey",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{publicKey}",
    "description": "Layout for a public key",
    "lineNumber": 8,
    "params": [
      {
        "name": "property",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "publicKey",
        "defaultValue": "publicKey"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 128,
    "kind": "function",
    "name": "uint64",
    "memberof": "src/layout.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/layout.js~uint64",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{uint64}",
    "description": "Layout for a 64bit unsigned value",
    "lineNumber": 15,
    "params": [
      {
        "name": "property",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "uint64",
        "defaultValue": "uint64"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 129,
    "kind": "function",
    "name": "rustString",
    "memberof": "src/layout.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/layout.js~rustString",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{rustString}",
    "description": "Layout for a Rust String type",
    "lineNumber": 22,
    "params": [
      {
        "name": "property",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "string",
        "defaultValue": "string"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 130,
    "kind": "file",
    "name": "src/loader.js",
    "content": "// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\nimport {Account} from './account';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {Transaction} from './transaction';\nimport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nimport type {Connection} from './connection';\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @private\n   */\n  connection: Connection;\n\n  /**\n   * @private\n   */\n  programId: PublicKey;\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static get chunkSize(): number {\n    return 256;\n  }\n\n  /**\n   * @param connection The connection to use\n   * @param programId Public key that identifies the loader\n   */\n  constructor(connection: Connection, programId: PublicKey) {\n    Object.assign(this, {connection, programId});\n  }\n\n  /**\n   * Load program data\n   *\n   * @param program Account to load the program info\n   * @param data Program data\n   */\n  async load(program: Account, data: Array<number>) {\n    const userdataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const userdata = Buffer.alloc(chunkSize + 16);\n      userdataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes,\n        },\n        userdata,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [program.publicKey],\n        programId: this.programId,\n        userdata,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(this.connection, transaction, program),\n      );\n\n      // Run up to 8 Loads in parallel to prevent too many parallel transactions from\n      // getting rejected with AccountInUse.\n      //\n      // TODO: 8 was selected empirically and should probably be revisited\n      if (transactions.length === 8) {\n        await Promise.all(transactions);\n        transactions = [];\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n  }\n\n  /**\n   * Finalize an account loaded with program data for execution\n   *\n   * @param program `load()`ed Account\n   */\n  async finalize(program: Account) {\n    const userdataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n    ]);\n\n    const userdata = Buffer.alloc(userdataLayout.span);\n    userdataLayout.encode(\n      {\n        instruction: 1, // Finalize instruction\n      },\n      userdata,\n    );\n\n    const transaction = new Transaction();\n\n    transaction.add({\n      keys: [program.publicKey],\n      programId: this.programId,\n      userdata,\n    });\n    transaction.add(SystemProgram.spawn(program.publicKey));\n    await sendAndConfirmTransaction(this.connection, transaction, program);\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/loader.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 131,
    "kind": "class",
    "name": "Loader",
    "memberof": "src/loader.js",
    "static": true,
    "longname": "src/loader.js~Loader",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{Loader}",
    "description": "Program loader interface",
    "lineNumber": 15,
    "interface": false
  },
  {
    "__docId__": 132,
    "kind": "member",
    "name": "connection",
    "memberof": "src/loader.js~Loader",
    "static": false,
    "longname": "src/loader.js~Loader#connection",
    "access": "private",
    "description": " ",
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "Connection"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 133,
    "kind": "member",
    "name": "programId",
    "memberof": "src/loader.js~Loader",
    "static": false,
    "longname": "src/loader.js~Loader#programId",
    "access": "private",
    "description": " ",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "PublicKey"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 134,
    "kind": "get",
    "name": "chunkSize",
    "memberof": "src/loader.js~Loader",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/loader.js~Loader.chunkSize",
    "access": "public",
    "description": "Amount of program data placed in each load Transaction ",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 135,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/loader.js~Loader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/loader.js~Loader#constructor",
    "access": "public",
    "description": " ",
    "lineNumber": 37,
    "params": [
      {
        "nullable": null,
        "types": [
          "Connection"
        ],
        "spread": false,
        "optional": false,
        "name": "connection",
        "description": "The connection to use"
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "programId",
        "description": "Public key that identifies the loader"
      }
    ]
  },
  {
    "__docId__": 136,
    "kind": "method",
    "name": "load",
    "memberof": "src/loader.js~Loader",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/loader.js~Loader#load",
    "access": "public",
    "description": "Load program data ",
    "lineNumber": 47,
    "params": [
      {
        "nullable": null,
        "types": [
          "Account"
        ],
        "spread": false,
        "optional": false,
        "name": "program",
        "description": "Account to load the program info"
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Program data"
      }
    ],
    "return": null
  },
  {
    "__docId__": 137,
    "kind": "method",
    "name": "finalize",
    "memberof": "src/loader.js~Loader",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/loader.js~Loader#finalize",
    "access": "public",
    "description": "Finalize an account loaded with program data for execution ",
    "lineNumber": 105,
    "params": [
      {
        "nullable": null,
        "types": [
          "Account"
        ],
        "spread": false,
        "optional": false,
        "name": "program",
        "description": "`load()`ed Account"
      }
    ],
    "return": null
  },
  {
    "__docId__": 138,
    "kind": "file",
    "name": "src/native-loader.js",
    "content": "// @flow\n\nimport {Account} from './account';\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport {SystemProgram} from './system-program';\nimport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nimport type {Connection} from './connection';\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class NativeLoader {\n  /**\n   * Public key that identifies the NativeLoader\n   */\n  static get programId(): PublicKey {\n    return new PublicKey(\n      '0x100000000000000000000000000000000000000000000000000000000000000',\n    );\n  }\n\n  /**\n   * Loads a native program\n   *\n   * @param connection The connection to use\n   * @param owner User account to load the program with\n   * @param programName Name of the native program\n   */\n  static async load(\n    connection: Connection,\n    owner: Account,\n    programName: string,\n  ): Promise<PublicKey> {\n    const bytes = [...Buffer.from(programName)];\n\n    const programAccount = new Account();\n\n    // Allocate memory for the program account\n    const transaction = SystemProgram.createAccount(\n      owner.publicKey,\n      programAccount.publicKey,\n      1 + 1 + 1,\n      bytes.length + 1,\n      NativeLoader.programId,\n    );\n    await sendAndConfirmTransaction(connection, transaction, owner);\n\n    const loader = new Loader(connection, NativeLoader.programId);\n    await loader.load(programAccount, bytes);\n    await loader.finalize(programAccount);\n\n    return programAccount.publicKey;\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/native-loader.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 139,
    "kind": "class",
    "name": "NativeLoader",
    "memberof": "src/native-loader.js",
    "static": true,
    "longname": "src/native-loader.js~NativeLoader",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{NativeLoader}",
    "description": "Factory class for transactions to interact with a program loader",
    "lineNumber": 13,
    "interface": false
  },
  {
    "__docId__": 140,
    "kind": "get",
    "name": "programId",
    "memberof": "src/native-loader.js~NativeLoader",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/native-loader.js~NativeLoader.programId",
    "access": "public",
    "description": "Public key that identifies the NativeLoader ",
    "lineNumber": 17,
    "type": {
      "nullable": null,
      "types": [
        "PublicKey"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 141,
    "kind": "method",
    "name": "load",
    "memberof": "src/native-loader.js~NativeLoader",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/native-loader.js~NativeLoader.load",
    "access": "public",
    "description": "Loads a native program  ",
    "lineNumber": 30,
    "params": [
      {
        "nullable": null,
        "types": [
          "Connection"
        ],
        "spread": false,
        "optional": false,
        "name": "connection",
        "description": "The connection to use"
      },
      {
        "nullable": null,
        "types": [
          "Account"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": "User account to load the program with"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "programName",
        "description": "Name of the native program"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<PublicKey>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 142,
    "kind": "file",
    "name": "src/publickey.js",
    "content": "// @flow\n\nimport BN from 'bn.js';\nimport bs58 from 'bs58';\n\n/**\n * A public key\n */\nexport class PublicKey {\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   */\n  constructor(value: number | string | Buffer | Array<number>) {\n    if (typeof value === 'string') {\n      // hexadecimal number\n      if (value.startsWith('0x')) {\n        this._bn = new BN(value.substring(2), 16);\n      } else {\n        // assume base 58 encoding by default\n        this._bn = new BN(bs58.decode(value));\n      }\n    } else {\n      this._bn = new BN(value);\n    }\n\n    if (this._bn.byteLength() > 32) {\n      throw new Error(`Invalid public key input`);\n    }\n  }\n\n  /**\n   * Checks if the provided object is a PublicKey\n   */\n  static isPublicKey(o: Object): boolean {\n    return o instanceof PublicKey;\n  }\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBuffer());\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Returns a string representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/publickey.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 143,
    "kind": "class",
    "name": "PublicKey",
    "memberof": "src/publickey.js",
    "static": true,
    "longname": "src/publickey.js~PublicKey",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{PublicKey}",
    "description": "A public key",
    "lineNumber": 9,
    "interface": false
  },
  {
    "__docId__": 144,
    "kind": "member",
    "name": "_bn",
    "memberof": "src/publickey.js~PublicKey",
    "static": false,
    "longname": "src/publickey.js~PublicKey#_bn",
    "access": "private",
    "description": "",
    "lineNumber": 10,
    "type": {
      "nullable": null,
      "types": [
        "BN"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 145,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/publickey.js~PublicKey",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/publickey.js~PublicKey#constructor",
    "access": "public",
    "description": "Create a new PublicKey object ",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "number",
          "string",
          "Buffer",
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 149,
    "kind": "method",
    "name": "isPublicKey",
    "memberof": "src/publickey.js~PublicKey",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/publickey.js~PublicKey.isPublicKey",
    "access": "public",
    "description": "Checks if the provided object is a PublicKey  ",
    "lineNumber": 36,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 150,
    "kind": "method",
    "name": "equals",
    "memberof": "src/publickey.js~PublicKey",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/publickey.js~PublicKey#equals",
    "access": "public",
    "description": "Checks if two publicKeys are equal  ",
    "lineNumber": 43,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "publicKey",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 151,
    "kind": "method",
    "name": "toBase58",
    "memberof": "src/publickey.js~PublicKey",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/publickey.js~PublicKey#toBase58",
    "access": "public",
    "description": "Return the base-58 representation of the public key  ",
    "lineNumber": 50,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 152,
    "kind": "method",
    "name": "toBuffer",
    "memberof": "src/publickey.js~PublicKey",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/publickey.js~PublicKey#toBuffer",
    "access": "public",
    "description": "Return the Buffer representation of the public key  ",
    "lineNumber": 57,
    "return": {
      "nullable": null,
      "types": [
        "Buffer"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 153,
    "kind": "method",
    "name": "toString",
    "memberof": "src/publickey.js~PublicKey",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/publickey.js~PublicKey#toString",
    "access": "public",
    "description": "Returns a string representation of the public key  ",
    "lineNumber": 71,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 154,
    "kind": "file",
    "name": "src/system-program.js",
    "content": "// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\nimport {Transaction} from './transaction';\nimport {PublicKey} from './publickey';\nimport * as Layout from './layout';\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * Public key that identifies the System program\n   */\n  static get programId(): PublicKey {\n    return new PublicKey(\n      '0x000000000000000000000000000000000000000000000000000000000000000',\n    );\n  }\n\n  /**\n   * Generate a Transaction that creates a new account\n   */\n  static createAccount(\n    from: PublicKey,\n    newAccount: PublicKey,\n    tokens: number,\n    space: number,\n    programId: PublicKey,\n  ): Transaction {\n    const userdataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('tokens'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]);\n\n    const userdata = Buffer.alloc(userdataLayout.span);\n    userdataLayout.encode(\n      {\n        instruction: 0, // Create Account instruction\n        tokens,\n        space,\n        programId: programId.toBuffer(),\n      },\n      userdata,\n    );\n\n    return new Transaction().add({\n      keys: [from, newAccount],\n      programId: SystemProgram.programId,\n      userdata,\n    });\n  }\n\n  /**\n   * Generate a Transaction that moves tokens from one account to another\n   */\n  static move(from: PublicKey, to: PublicKey, amount: number): Transaction {\n    const userdataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('amount'),\n    ]);\n\n    const userdata = Buffer.alloc(userdataLayout.span);\n    userdataLayout.encode(\n      {\n        instruction: 2, // Move instruction\n        amount,\n      },\n      userdata,\n    );\n\n    return new Transaction().add({\n      keys: [from, to],\n      programId: SystemProgram.programId,\n      userdata,\n    });\n  }\n\n  /**\n   * Generate a Transaction that assigns an account to a program\n   */\n  static assign(from: PublicKey, programId: PublicKey): Transaction {\n    const userdataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]);\n\n    const userdata = Buffer.alloc(userdataLayout.span);\n    userdataLayout.encode(\n      {\n        instruction: 1, // Assign instruction\n        programId: programId.toBuffer(),\n      },\n      userdata,\n    );\n\n    return new Transaction().add({\n      keys: [from],\n      programId: SystemProgram.programId,\n      userdata,\n    });\n  }\n\n  /**\n   * Spawn a new program from an account\n   */\n  static spawn(programId: PublicKey): Transaction {\n    const userdataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n    ]);\n\n    const userdata = Buffer.alloc(userdataLayout.span);\n    userdataLayout.encode(\n      {\n        instruction: 3, // Spawn instruction\n      },\n      userdata,\n    );\n\n    return new Transaction().add({\n      keys: [programId],\n      programId: SystemProgram.programId,\n      userdata,\n    });\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/system-program.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 155,
    "kind": "class",
    "name": "SystemProgram",
    "memberof": "src/system-program.js",
    "static": true,
    "longname": "src/system-program.js~SystemProgram",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{SystemProgram}",
    "description": "Factory class for transactions to interact with the System program",
    "lineNumber": 12,
    "interface": false
  },
  {
    "__docId__": 156,
    "kind": "get",
    "name": "programId",
    "memberof": "src/system-program.js~SystemProgram",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/system-program.js~SystemProgram.programId",
    "access": "public",
    "description": "Public key that identifies the System program ",
    "lineNumber": 16,
    "type": {
      "nullable": null,
      "types": [
        "PublicKey"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 157,
    "kind": "method",
    "name": "createAccount",
    "memberof": "src/system-program.js~SystemProgram",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/system-program.js~SystemProgram.createAccount",
    "access": "public",
    "description": "Generate a Transaction that creates a new account  ",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "from",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "newAccount",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "tokens",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "space",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "programId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Transaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 158,
    "kind": "method",
    "name": "move",
    "memberof": "src/system-program.js~SystemProgram",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/system-program.js~SystemProgram.move",
    "access": "public",
    "description": "Generate a Transaction that moves tokens from one account to another  ",
    "lineNumber": 60,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "from",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "to",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Transaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 159,
    "kind": "method",
    "name": "assign",
    "memberof": "src/system-program.js~SystemProgram",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/system-program.js~SystemProgram.assign",
    "access": "public",
    "description": "Generate a Transaction that assigns an account to a program  ",
    "lineNumber": 85,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "from",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "programId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Transaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 160,
    "kind": "method",
    "name": "spawn",
    "memberof": "src/system-program.js~SystemProgram",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/system-program.js~SystemProgram.spawn",
    "access": "public",
    "description": "Spawn a new program from an account  ",
    "lineNumber": 110,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "programId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Transaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 161,
    "kind": "file",
    "name": "src/token-program.js",
    "content": "/**\n * @flow\n */\n\nimport assert from 'assert';\nimport BN from 'bn.js';\nimport * as BufferLayout from 'buffer-layout';\n\nimport * as Layout from './layout';\nimport {Account} from './account';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport type {TransactionSignature} from './transaction';\nimport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nimport type {Connection} from './connection';\n\n/**\n * Some amount of tokens\n */\nexport class TokenAmount extends BN {\n  /**\n   * Convert to Buffer representation\n   */\n  toBuffer(): Buffer {\n    const a = super.toArray().reverse();\n    const b = Buffer.from(a);\n    if (b.length === 8) {\n      return b;\n    }\n    assert(b.length < 8, 'TokenAmount too large');\n\n    const zeroPad = Buffer.alloc(8);\n    b.copy(zeroPad);\n    return zeroPad;\n  }\n\n  /**\n   * Construct a TokenAmount from Buffer representation\n   */\n  static fromBuffer(buffer: Buffer): TokenAmount {\n    assert(buffer.length === 8, `Invalid buffer length: ${buffer.length}`);\n    return new BN(\n      [...buffer]\n        .reverse()\n        .map(i => `00${i.toString(16)}`.slice(-2))\n        .join(''),\n      16,\n    );\n  }\n}\n\n/**\n * Information about a token\n */\ntype TokenInfo = {|\n  /**\n   * Total supply of tokens\n   */\n  supply: TokenAmount,\n\n  /**\n   * Number of base 10 digits to the right of the decimal place\n   */\n  decimals: number,\n\n  /**\n   * Descriptive name of this token\n   */\n  name: string,\n\n  /**\n   * Symbol for this token\n   */\n  symbol: string,\n|};\n\n/**\n * @private\n */\nconst TokenInfoLayout = BufferLayout.struct([\n  Layout.uint64('supply'),\n  BufferLayout.u8('decimals'),\n  Layout.rustString('name'),\n  Layout.rustString('symbol'),\n]);\n\n/**\n * Information about a token account\n */\ntype TokenAccountInfo = {|\n  /**\n   * The kind of token this account holds\n   */\n  token: PublicKey,\n\n  /**\n   * Owner of this account\n   */\n  owner: PublicKey,\n\n  /**\n   * Amount of tokens this account holds\n   */\n  amount: TokenAmount,\n\n  /**\n   * The source account for the tokens.\n   *\n   * If `source` is null, the source is this account.\n   * If `source` is not null, the `amount` of tokens in this account represent\n   * an allowance of tokens that may be transferred from the source account\n   */\n  source: null | PublicKey,\n\n  /**\n   * Original amount of tokens this delegate account was authorized to spend\n   * If `source` is null, originalAmount is zero\n   */\n  originalAmount: TokenAmount,\n|};\n\n/**\n * @private\n */\nconst TokenAccountInfoLayout = BufferLayout.struct([\n  Layout.publicKey('token'),\n  Layout.publicKey('owner'),\n  Layout.uint64('amount'),\n  BufferLayout.u8('sourceOption'),\n  Layout.publicKey('source'),\n  Layout.uint64('originalAmount'),\n]);\n\ntype TokenAndPublicKey = [Token, PublicKey]; // This type exists to workaround an esdoc parse error\n\n/**\n * The built-in token program\n */\nexport const SYSTEM_TOKEN_PROGRAM_ID = new PublicKey(\n  '0x8300000000000000000000000000000000000000000000000000000000000000',\n);\n\n/**\n * An ERC20-like Token\n */\nexport class Token {\n  /**\n   * @private\n   */\n  connection: Connection;\n\n  /**\n   * The public key identifying this token\n   */\n  token: PublicKey;\n\n  /**\n   * Program Identifier for the Token program\n   */\n  programId: PublicKey;\n\n  /**\n   * Create a Token object attached to the specific token\n   *\n   * @param connection The connection to use\n   * @param token Public key of the token\n   * @param programId Optional token programId, uses the system programId by default\n   */\n  constructor(\n    connection: Connection,\n    token: PublicKey,\n    programId: PublicKey = SYSTEM_TOKEN_PROGRAM_ID,\n  ) {\n    Object.assign(this, {connection, token, programId});\n  }\n\n  /**\n   * Create a new Token\n   *\n   * @param connection The connection to use\n   * @param owner User account that will own the returned Token Account\n   * @param supply Total supply of the new token\n   * @param name Descriptive name of this token\n   * @param symbol Symbol for this token\n   * @param decimals Location of the decimal place\n   * @param programId Optional token programId, uses the system programId by default\n   * @return Token object for the newly minted token, Public key of the Token Account holding the total supply of new tokens\n   */\n  static async createNewToken(\n    connection: Connection,\n    owner: Account,\n    supply: TokenAmount,\n    name: string,\n    symbol: string,\n    decimals: number,\n    programId: PublicKey = SYSTEM_TOKEN_PROGRAM_ID,\n  ): Promise<TokenAndPublicKey> {\n    const tokenAccount = new Account();\n    const token = new Token(connection, tokenAccount.publicKey, programId);\n    const initialAccountPublicKey = await token.newAccount(owner, null);\n\n    let transaction;\n\n    const userdataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.uint64('supply'),\n      BufferLayout.u8('decimals'),\n      Layout.rustString('name'),\n      Layout.rustString('symbol'),\n    ]);\n\n    let userdata = Buffer.alloc(1024);\n    {\n      const encodeLength = userdataLayout.encode(\n        {\n          instruction: 0, // NewToken instruction\n          supply: supply.toBuffer(),\n          decimals,\n          name,\n          symbol,\n        },\n        userdata,\n      );\n      userdata = userdata.slice(0, encodeLength);\n    }\n\n    // Allocate memory for the tokenAccount account\n    transaction = SystemProgram.createAccount(\n      owner.publicKey,\n      tokenAccount.publicKey,\n      1,\n      1 + userdata.length,\n      programId,\n    );\n    await sendAndConfirmTransaction(connection, transaction, owner);\n\n    transaction = new Transaction().add({\n      keys: [tokenAccount.publicKey, initialAccountPublicKey],\n      programId,\n      userdata,\n    });\n    transaction.fee = 0; // TODO: Batch with the `SystemProgram.createAccount` and remove this line\n    await sendAndConfirmTransaction(connection, transaction, tokenAccount);\n\n    return [token, initialAccountPublicKey];\n  }\n\n  /**\n   * Create a new and empty token account.\n   *\n   * This account may then be used as a `transfer()` or `approve()` destination\n   *\n   * @param owner User account that will own the new token account\n   * @param source If not null, create a delegate account that when authorized\n   *               may transfer tokens from this `source` account\n   * @return Public key of the new empty token account\n   */\n  async newAccount(\n    owner: Account,\n    source: null | PublicKey = null,\n  ): Promise<PublicKey> {\n    const tokenAccount = new Account();\n    let transaction;\n\n    const userdataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n    ]);\n\n    const userdata = Buffer.alloc(userdataLayout.span);\n    userdataLayout.encode(\n      {\n        instruction: 1, // NewTokenAccount instruction\n      },\n      userdata,\n    );\n\n    // Allocate memory for the token\n    transaction = SystemProgram.createAccount(\n      owner.publicKey,\n      tokenAccount.publicKey,\n      1,\n      1 + TokenAccountInfoLayout.span,\n      this.programId,\n    );\n    await sendAndConfirmTransaction(this.connection, transaction, owner);\n\n    // Initialize the token account\n    const keys = [tokenAccount.publicKey, owner.publicKey, this.token];\n    if (source) {\n      keys.push(source);\n    }\n    transaction = new Transaction().add({\n      keys,\n      programId: this.programId,\n      userdata,\n    });\n    transaction.fee = 0; // TODO: Batch with the `SystemProgram.createAccount` and remove this line\n    await sendAndConfirmTransaction(this.connection, transaction, tokenAccount);\n\n    return tokenAccount.publicKey;\n  }\n\n  /**\n   * Retrieve token information\n   */\n  async tokenInfo(): Promise<TokenInfo> {\n    const accountInfo = await this.connection.getAccountInfo(this.token);\n    if (!accountInfo.owner.equals(this.programId)) {\n      throw new Error(\n        `Invalid token owner: ${JSON.stringify(accountInfo.owner)}`,\n      );\n    }\n\n    const userdata = Buffer.from(accountInfo.userdata);\n\n    if (userdata.readUInt8(0) !== 1) {\n      throw new Error(`Invalid token userdata`);\n    }\n    const tokenInfo = TokenInfoLayout.decode(userdata, 1);\n    tokenInfo.supply = TokenAmount.fromBuffer(tokenInfo.supply);\n    return tokenInfo;\n  }\n\n  /**\n   * Retrieve account information\n   *\n   * @param account Public key of the token account\n   */\n  async accountInfo(account: PublicKey): Promise<TokenAccountInfo> {\n    const accountInfo = await this.connection.getAccountInfo(account);\n    if (!accountInfo.owner.equals(this.programId)) {\n      throw new Error(`Invalid token account owner`);\n    }\n\n    const userdata = Buffer.from(accountInfo.userdata);\n    if (userdata.readUInt8(0) !== 2) {\n      throw new Error(`Invalid token account userdata`);\n    }\n    const tokenAccountInfo = TokenAccountInfoLayout.decode(userdata, 1);\n\n    tokenAccountInfo.token = new PublicKey(tokenAccountInfo.token);\n    tokenAccountInfo.owner = new PublicKey(tokenAccountInfo.owner);\n    tokenAccountInfo.amount = TokenAmount.fromBuffer(tokenAccountInfo.amount);\n    if (tokenAccountInfo.sourceOption === 0) {\n      tokenAccountInfo.source = null;\n      tokenAccountInfo.originalAmount = new TokenAmount();\n    } else {\n      tokenAccountInfo.source = new PublicKey(tokenAccountInfo.source);\n      tokenAccountInfo.originalAmount = TokenAmount.fromBuffer(\n        tokenAccountInfo.originalAmount,\n      );\n    }\n\n    if (!tokenAccountInfo.token.equals(this.token)) {\n      throw new Error(\n        `Invalid token account token: ${JSON.stringify(\n          tokenAccountInfo.token,\n        )} !== ${JSON.stringify(this.token)}`,\n      );\n    }\n    return tokenAccountInfo;\n  }\n\n  /**\n   * Transfer tokens to another account\n   *\n   * @param owner Owner of the source token account\n   * @param source Source token account\n   * @param destination Destination token account\n   * @param amount Number of tokens to transfer\n   */\n  async transfer(\n    owner: Account,\n    source: PublicKey,\n    destination: PublicKey,\n    amount: number | TokenAmount,\n  ): Promise<?TransactionSignature> {\n    return await sendAndConfirmTransaction(\n      this.connection,\n      new Transaction().add(\n        await this.transferInstruction(\n          owner.publicKey,\n          source,\n          destination,\n          amount,\n        ),\n      ),\n      owner,\n    );\n  }\n\n  /**\n   * Grant a third-party permission to transfer up the specified number of tokens from an account\n   *\n   * @param owner Owner of the source token account\n   * @param account Public key of the token account\n   * @param delegate Token account authorized to perform a transfer tokens from the source account\n   * @param amount Maximum number of tokens the delegate may transfer\n   */\n  async approve(\n    owner: Account,\n    account: PublicKey,\n    delegate: PublicKey,\n    amount: number | TokenAmount,\n  ): Promise<void> {\n    await sendAndConfirmTransaction(\n      this.connection,\n      new Transaction().add(\n        this.approveInstruction(owner.publicKey, account, delegate, amount),\n      ),\n      owner,\n    );\n  }\n\n  /**\n   * Remove approval for the transfer of any remaining tokens\n   *\n   * @param owner Owner of the source token account\n   * @param account Public key of the token account\n   * @param delegate Token account to revoke authorization from\n   */\n  revoke(\n    owner: Account,\n    account: PublicKey,\n    delegate: PublicKey,\n  ): Promise<void> {\n    return this.approve(owner, account, delegate, 0);\n  }\n\n  /**\n   * Assign a new owner to the account\n   *\n   * @param owner Owner of the token account\n   * @param account Public key of the token account\n   * @param newOwner New owner of the token account\n   */\n  async setOwner(\n    owner: Account,\n    account: PublicKey,\n    newOwner: PublicKey,\n  ): Promise<void> {\n    await sendAndConfirmTransaction(\n      this.connection,\n      new Transaction().add(\n        this.setOwnerInstruction(owner.publicKey, account, newOwner),\n      ),\n      owner,\n    );\n  }\n\n  /**\n   * Construct a Transfer instruction\n   *\n   * @param owner Owner of the source token account\n   * @param source Source token account\n   * @param destination Destination token account\n   * @param amount Number of tokens to transfer\n   */\n  async transferInstruction(\n    owner: PublicKey,\n    source: PublicKey,\n    destination: PublicKey,\n    amount: number | TokenAmount,\n  ): Promise<TransactionInstruction> {\n    const accountInfo = await this.accountInfo(source);\n    if (!owner.equals(accountInfo.owner)) {\n      throw new Error('Account owner mismatch');\n    }\n\n    const userdataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.uint64('amount'),\n    ]);\n\n    const userdata = Buffer.alloc(userdataLayout.span);\n    userdataLayout.encode(\n      {\n        instruction: 2, // Transfer instruction\n        amount: new TokenAmount(amount).toBuffer(),\n      },\n      userdata,\n    );\n\n    const keys = [owner, source, destination];\n    if (accountInfo.source) {\n      keys.push(accountInfo.source);\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      userdata,\n    });\n  }\n\n  /**\n   * Construct an Approve instruction\n   *\n   * @param owner Owner of the source token account\n   * @param account Public key of the token account\n   * @param delegate Token account authorized to perform a transfer tokens from the source account\n   * @param amount Maximum number of tokens the delegate may transfer\n   */\n  approveInstruction(\n    owner: PublicKey,\n    account: PublicKey,\n    delegate: PublicKey,\n    amount: number | TokenAmount,\n  ): TransactionInstruction {\n    const userdataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.uint64('amount'),\n    ]);\n\n    const userdata = Buffer.alloc(userdataLayout.span);\n    userdataLayout.encode(\n      {\n        instruction: 3, // Approve instruction\n        amount: new TokenAmount(amount).toBuffer(),\n      },\n      userdata,\n    );\n\n    return new TransactionInstruction({\n      keys: [owner, account, delegate],\n      programId: this.programId,\n      userdata,\n    });\n  }\n\n  /**\n   * Construct an Revoke instruction\n   *\n   * @param owner Owner of the source token account\n   * @param account Public key of the token account\n   * @param delegate Token account authorized to perform a transfer tokens from the source account\n   */\n  revokeInstruction(\n    owner: PublicKey,\n    account: PublicKey,\n    delegate: PublicKey,\n  ): TransactionInstruction {\n    return this.approveInstruction(owner, account, delegate, 0);\n  }\n\n  /**\n   * Construct a SetOwner instruction\n   *\n   * @param owner Owner of the token account\n   * @param account Public key of the token account\n   * @param newOwner New owner of the token account\n   */\n  setOwnerInstruction(\n    owner: PublicKey,\n    account: PublicKey,\n    newOwner: PublicKey,\n  ): TransactionInstruction {\n    const userdataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n    ]);\n\n    const userdata = Buffer.alloc(userdataLayout.span);\n    userdataLayout.encode(\n      {\n        instruction: 4, // SetOwner instruction\n      },\n      userdata,\n    );\n\n    return new TransactionInstruction({\n      keys: [owner, account, newOwner],\n      programId: this.programId,\n      userdata,\n    });\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/token-program.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 162,
    "kind": "class",
    "name": "TokenAmount",
    "memberof": "src/token-program.js",
    "static": true,
    "longname": "src/token-program.js~TokenAmount",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{TokenAmount}",
    "description": "Some amount of tokens",
    "lineNumber": 21,
    "interface": false,
    "extends": [
      "bn.js~BN"
    ]
  },
  {
    "__docId__": 163,
    "kind": "method",
    "name": "toBuffer",
    "memberof": "src/token-program.js~TokenAmount",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/token-program.js~TokenAmount#toBuffer",
    "access": "public",
    "description": "Convert to Buffer representation  ",
    "lineNumber": 25,
    "return": {
      "nullable": null,
      "types": [
        "Buffer"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 164,
    "kind": "method",
    "name": "fromBuffer",
    "memberof": "src/token-program.js~TokenAmount",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/token-program.js~TokenAmount.fromBuffer",
    "access": "public",
    "description": "Construct a TokenAmount from Buffer representation  ",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "buffer",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TokenAmount"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 165,
    "kind": "variable",
    "name": "TokenInfoLayout",
    "memberof": "src/token-program.js",
    "static": true,
    "longname": "src/token-program.js~TokenInfoLayout",
    "access": "private",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "",
    "lineNumber": 81,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 166,
    "kind": "variable",
    "name": "TokenAccountInfoLayout",
    "memberof": "src/token-program.js",
    "static": true,
    "longname": "src/token-program.js~TokenAccountInfoLayout",
    "access": "private",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "",
    "lineNumber": 126,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 167,
    "kind": "variable",
    "name": "SYSTEM_TOKEN_PROGRAM_ID",
    "memberof": "src/token-program.js",
    "static": true,
    "longname": "src/token-program.js~SYSTEM_TOKEN_PROGRAM_ID",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{SYSTEM_TOKEN_PROGRAM_ID}",
    "description": "The built-in token program",
    "lineNumber": 140,
    "type": {
      "types": [
        "src/publickey.js~PublicKey"
      ]
    }
  },
  {
    "__docId__": 168,
    "kind": "class",
    "name": "Token",
    "memberof": "src/token-program.js",
    "static": true,
    "longname": "src/token-program.js~Token",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{Token}",
    "description": "An ERC20-like Token",
    "lineNumber": 147,
    "interface": false
  },
  {
    "__docId__": 169,
    "kind": "member",
    "name": "connection",
    "memberof": "src/token-program.js~Token",
    "static": false,
    "longname": "src/token-program.js~Token#connection",
    "access": "private",
    "description": " ",
    "lineNumber": 151,
    "type": {
      "nullable": null,
      "types": [
        "Connection"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 170,
    "kind": "member",
    "name": "token",
    "memberof": "src/token-program.js~Token",
    "static": false,
    "longname": "src/token-program.js~Token#token",
    "access": "public",
    "description": "The public key identifying this token ",
    "lineNumber": 156,
    "type": {
      "nullable": null,
      "types": [
        "PublicKey"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 171,
    "kind": "member",
    "name": "programId",
    "memberof": "src/token-program.js~Token",
    "static": false,
    "longname": "src/token-program.js~Token#programId",
    "access": "public",
    "description": "Program Identifier for the Token program ",
    "lineNumber": 161,
    "type": {
      "nullable": null,
      "types": [
        "PublicKey"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 172,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/token-program.js~Token",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/token-program.js~Token#constructor",
    "access": "public",
    "description": "Create a Token object attached to the specific token ",
    "lineNumber": 170,
    "params": [
      {
        "nullable": null,
        "types": [
          "Connection"
        ],
        "spread": false,
        "optional": false,
        "name": "connection",
        "description": "The connection to use"
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "token",
        "description": "Public key of the token"
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "undefined",
        "defaultRaw": "undefined",
        "name": "programId",
        "description": "Optional token programId, uses the system programId by default"
      }
    ]
  },
  {
    "__docId__": 173,
    "kind": "method",
    "name": "createNewToken",
    "memberof": "src/token-program.js~Token",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/token-program.js~Token.createNewToken",
    "access": "public",
    "description": "Create a new Token  ",
    "lineNumber": 190,
    "params": [
      {
        "nullable": null,
        "types": [
          "Connection"
        ],
        "spread": false,
        "optional": false,
        "name": "connection",
        "description": "The connection to use"
      },
      {
        "nullable": null,
        "types": [
          "Account"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": "User account that will own the returned Token Account"
      },
      {
        "nullable": null,
        "types": [
          "TokenAmount"
        ],
        "spread": false,
        "optional": false,
        "name": "supply",
        "description": "Total supply of the new token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Descriptive name of this token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "symbol",
        "description": "Symbol for this token"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "decimals",
        "description": "Location of the decimal place"
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "undefined",
        "defaultRaw": "undefined",
        "name": "programId",
        "description": "Optional token programId, uses the system programId by default"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<TokenAndPublicKey>"
      ],
      "spread": false,
      "description": "Token object for the newly minted token, Public key of the Token Account holding the total supply of new tokens"
    }
  },
  {
    "__docId__": 174,
    "kind": "method",
    "name": "newAccount",
    "memberof": "src/token-program.js~Token",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/token-program.js~Token#newAccount",
    "access": "public",
    "description": "Create a new and empty token account.\n\nThis account may then be used as a `transfer()` or `approve()` destination  ",
    "lineNumber": 259,
    "params": [
      {
        "nullable": null,
        "types": [
          "Account"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": "User account that will own the new token account"
      },
      {
        "nullable": null,
        "types": [
          "nullliteral",
          "PublicKey"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "undefined",
        "defaultRaw": "undefined",
        "name": "source",
        "description": "If not null, create a delegate account that when authorized\n              may transfer tokens from this `source` account"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<PublicKey>"
      ],
      "spread": false,
      "description": "Public key of the new empty token account"
    }
  },
  {
    "__docId__": 175,
    "kind": "method",
    "name": "tokenInfo",
    "memberof": "src/token-program.js~Token",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/token-program.js~Token#tokenInfo",
    "access": "public",
    "description": "Retrieve token information  ",
    "lineNumber": 307,
    "return": {
      "nullable": null,
      "types": [
        "Promise<TokenInfo>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 176,
    "kind": "method",
    "name": "accountInfo",
    "memberof": "src/token-program.js~Token",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/token-program.js~Token#accountInfo",
    "access": "public",
    "description": "Retrieve account information  ",
    "lineNumber": 330,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "account",
        "description": "Public key of the token account"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<TokenAccountInfo>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 177,
    "kind": "method",
    "name": "transfer",
    "memberof": "src/token-program.js~Token",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/token-program.js~Token#transfer",
    "access": "public",
    "description": "Transfer tokens to another account  ",
    "lineNumber": 373,
    "params": [
      {
        "nullable": null,
        "types": [
          "Account"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": "Owner of the source token account"
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "Source token account"
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "destination",
        "description": "Destination token account"
      },
      {
        "nullable": null,
        "types": [
          "number",
          "TokenAmount"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": "Number of tokens to transfer"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<?TransactionSignature>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 178,
    "kind": "method",
    "name": "approve",
    "memberof": "src/token-program.js~Token",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/token-program.js~Token#approve",
    "access": "public",
    "description": "Grant a third-party permission to transfer up the specified number of tokens from an account  ",
    "lineNumber": 401,
    "params": [
      {
        "nullable": null,
        "types": [
          "Account"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": "Owner of the source token account"
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "account",
        "description": "Public key of the token account"
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "delegate",
        "description": "Token account authorized to perform a transfer tokens from the source account"
      },
      {
        "nullable": null,
        "types": [
          "number",
          "TokenAmount"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": "Maximum number of tokens the delegate may transfer"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 179,
    "kind": "method",
    "name": "revoke",
    "memberof": "src/token-program.js~Token",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/token-program.js~Token#revoke",
    "access": "public",
    "description": "Remove approval for the transfer of any remaining tokens  ",
    "lineNumber": 423,
    "params": [
      {
        "nullable": null,
        "types": [
          "Account"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": "Owner of the source token account"
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "account",
        "description": "Public key of the token account"
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "delegate",
        "description": "Token account to revoke authorization from"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 180,
    "kind": "method",
    "name": "setOwner",
    "memberof": "src/token-program.js~Token",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/token-program.js~Token#setOwner",
    "access": "public",
    "description": "Assign a new owner to the account  ",
    "lineNumber": 438,
    "params": [
      {
        "nullable": null,
        "types": [
          "Account"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": "Owner of the token account"
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "account",
        "description": "Public key of the token account"
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "newOwner",
        "description": "New owner of the token account"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 181,
    "kind": "method",
    "name": "transferInstruction",
    "memberof": "src/token-program.js~Token",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/token-program.js~Token#transferInstruction",
    "access": "public",
    "description": "Construct a Transfer instruction  ",
    "lineNumber": 460,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": "Owner of the source token account"
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "Source token account"
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "destination",
        "description": "Destination token account"
      },
      {
        "nullable": null,
        "types": [
          "number",
          "TokenAmount"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": "Number of tokens to transfer"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<TransactionInstruction>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 182,
    "kind": "method",
    "name": "approveInstruction",
    "memberof": "src/token-program.js~Token",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/token-program.js~Token#approveInstruction",
    "access": "public",
    "description": "Construct an Approve instruction  ",
    "lineNumber": 504,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": "Owner of the source token account"
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "account",
        "description": "Public key of the token account"
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "delegate",
        "description": "Token account authorized to perform a transfer tokens from the source account"
      },
      {
        "nullable": null,
        "types": [
          "number",
          "TokenAmount"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": "Maximum number of tokens the delegate may transfer"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TransactionInstruction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 183,
    "kind": "method",
    "name": "revokeInstruction",
    "memberof": "src/token-program.js~Token",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/token-program.js~Token#revokeInstruction",
    "access": "public",
    "description": "Construct an Revoke instruction  ",
    "lineNumber": 538,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": "Owner of the source token account"
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "account",
        "description": "Public key of the token account"
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "delegate",
        "description": "Token account authorized to perform a transfer tokens from the source account"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TransactionInstruction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 184,
    "kind": "method",
    "name": "setOwnerInstruction",
    "memberof": "src/token-program.js~Token",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/token-program.js~Token#setOwnerInstruction",
    "access": "public",
    "description": "Construct a SetOwner instruction  ",
    "lineNumber": 553,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": "Owner of the token account"
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "account",
        "description": "Public key of the token account"
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "newOwner",
        "description": "New owner of the token account"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TransactionInstruction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 185,
    "kind": "file",
    "name": "src/transaction.js",
    "content": "// @flow\n\nimport invariant from 'assert';\nimport * as BufferLayout from 'buffer-layout';\nimport nacl from 'tweetnacl';\nimport bs58 from 'bs58';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {Account} from './account';\n\n/**\n * @typedef {string} TransactionSignature\n */\nexport type TransactionSignature = string;\n\n/**\n * @typedef {string} TransactionId\n */\nexport type TransactionId = string;\n\n/**\n * Maximum over-the-wire size of a Transaction\n */\nexport const PACKET_DATA_SIZE = 512;\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n *\n * @typedef {Object} TransactionInstructionCtorFields\n * @property {?Array<PublicKey>} keys\n * @property {?PublicKey} programId\n * @property {?Buffer} userdata\n */\ntype TransactionInstructionCtorFields = {|\n  keys?: Array<PublicKey>,\n  programId?: PublicKey,\n  userdata?: Buffer,\n|};\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   */\n  keys: Array<PublicKey> = [];\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  userdata: Buffer = Buffer.alloc(0);\n\n  constructor(opts?: TransactionInstructionCtorFields) {\n    opts && Object.assign(this, opts);\n  }\n}\n\n/**\n * @private\n */\ntype SignaturePubkeyPair = {|\n  signature: Buffer | null,\n  publicKey: PublicKey,\n|};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n *\n * @typedef {Object} TransactionCtorFields\n * @property {?number} fee\n * @property (?lastId} A recent transaction id\n * @property (?signatures} One or more signatures\n *\n */\ntype TransactionCtorFields = {|\n  fee?: number,\n  lastId?: TransactionId,\n  signatures?: Array<SignaturePubkeyPair>,\n|};\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (primary) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id.  Must be populated by the caller\n   */\n  lastId: ?TransactionId;\n\n  /**\n   * Fee for this transaction\n   */\n  fee: number = 1;\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts?: TransactionCtorFields) {\n    opts && Object.assign(this, opts);\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<Transaction | TransactionInstructionCtorFields>\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach(item => {\n      if (item instanceof Transaction) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * @private\n   */\n  _getSignData(): Buffer {\n    const {lastId} = this;\n    if (!lastId) {\n      throw new Error('Transaction lastId required');\n    }\n\n    if (this.instructions.length < 1) {\n      throw new Error('No instructions provided');\n    }\n\n    const keys = this.signatures.map(({publicKey}) => publicKey.toString());\n    const programIds = [];\n    this.instructions.forEach(instruction => {\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n\n      instruction.keys.map(key => key.toString()).forEach(key => {\n        if (!keys.includes(key)) {\n          keys.push(key);\n        }\n      });\n    });\n\n    const instructions = this.instructions.map(instruction => {\n      const {userdata, programId} = instruction;\n      return {\n        programIdIndex: programIds.indexOf(programId.toString()),\n        keyIndices: instruction.keys.map(key => keys.indexOf(key.toString())),\n        userdata,\n      };\n    });\n\n    instructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.keyIndices.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    const instructionLayout = BufferLayout.struct([\n      BufferLayout.u8('programIdIndex'),\n\n      BufferLayout.u32('keyIndicesLength'),\n      BufferLayout.u32('keyIndicesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('keyIndex'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'keyIndices',\n      ),\n      BufferLayout.u32('userdataLength'),\n      BufferLayout.u32('userdataLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('userdatum'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'userdata',\n      ),\n    ]);\n\n    const signDataLayout = BufferLayout.struct([\n      BufferLayout.u32('keysLength'),\n      BufferLayout.u32('keysLengthPadding'),\n      BufferLayout.seq(\n        Layout.publicKey('key'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'keys',\n      ),\n      Layout.publicKey('lastId'),\n      BufferLayout.ns64('fee'),\n\n      BufferLayout.u32('programIdsLength'),\n      BufferLayout.u32('programIdsLengthPadding'),\n      BufferLayout.seq(\n        Layout.publicKey('programId'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'programIds',\n      ),\n\n      BufferLayout.u32('instructionsLength'),\n      BufferLayout.u32('instructionsLengthPadding'),\n      BufferLayout.seq(\n        instructionLayout,\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'instructions',\n      ),\n    ]);\n\n    const transaction = {\n      keys: keys.map(key => new PublicKey(key).toBuffer()),\n      lastId: Buffer.from(bs58.decode(lastId)),\n      fee: this.fee,\n      programIds: programIds.map(programId =>\n        new PublicKey(programId).toBuffer(),\n      ),\n      instructions,\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    signData = signData.slice(0, length);\n\n    return signData;\n  }\n\n  /**\n   * Sign the Transaction with the specified accounts.  Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used when testing for Transaction confirmation.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `lastId` before invoking this method\n   */\n  sign(...signers: Array<Account>) {\n    this.signPartial(...signers);\n  }\n\n  /**\n   * Partially sign a Transaction with the specified accounts.  The `Account`\n   * inputs will be used to sign the Transaction immediately, while any\n   * `PublicKey` inputs will be referenced in the signed Transaction but need to\n   * be filled in later by calling `addSigner()` with the matching `Account`.\n   *\n   * All the caveats from the `sign` method apply to `signPartial`\n   */\n  signPartial(...partialSigners: Array<PublicKey | Account>) {\n    if (partialSigners.length === 0) {\n      throw new Error('No signers');\n    }\n    const signatures: Array<SignaturePubkeyPair> = partialSigners.map(\n      accountOrPublicKey => {\n        const publicKey =\n          accountOrPublicKey instanceof Account\n            ? accountOrPublicKey.publicKey\n            : accountOrPublicKey;\n        return {\n          signature: null,\n          publicKey,\n        };\n      },\n    );\n    this.signatures = signatures;\n    const signData = this._getSignData();\n\n    partialSigners.forEach((accountOrPublicKey, index) => {\n      if (accountOrPublicKey instanceof PublicKey) {\n        return;\n      }\n      const signature = nacl.sign.detached(\n        signData,\n        accountOrPublicKey.secretKey,\n      );\n      invariant(signature.length === 64);\n      signatures[index].signature = signature;\n    });\n  }\n\n  /**\n   * Fill in a signature for a partially signed Transaction.  The `signer` must\n   * be the corresponding `Account` for a `PublicKey` that was previously provided to\n   * `signPartial`\n   */\n  addSigner(signer: Account) {\n    const index = this.signatures.findIndex(sigpair =>\n      signer.publicKey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`Unknown signer: ${signer.publicKey.toString()}`);\n    }\n\n    const signData = this._getSignData();\n    const signature = nacl.sign.detached(signData, signer.secretKey);\n    invariant(signature.length === 64);\n    this.signatures[index].signature = signature;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   *\n   * The Transaction must have a valid `signature` before invoking this method\n   */\n  serialize(): Buffer {\n    const {signatures} = this;\n    if (!signatures) {\n      throw new Error('Transaction has not been signed');\n    }\n\n    const signData = this._getSignData();\n    const wireTransaction = Buffer.alloc(\n      8 + signatures.length * 64 + signData.length,\n    );\n    invariant(signatures.length < 256);\n    wireTransaction.writeUInt8(signatures.length, 0);\n    signatures.forEach(({signature}, index) => {\n      invariant(signature !== null, `null signature`);\n      invariant(signature.length === 64, `signature has invalid length`);\n      Buffer.from(signature).copy(wireTransaction, 8 + index * 64);\n    });\n    signData.copy(wireTransaction, 8 + signatures.length * 64);\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @private\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys;\n  }\n\n  /**\n   * Deprecated method\n   * @private\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @private\n   */\n  get userdata(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].userdata;\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/transaction.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 186,
    "kind": "typedef",
    "name": "TransactionSignature",
    "memberof": "src/transaction.js",
    "static": true,
    "longname": "src/transaction.js~TransactionSignature",
    "access": "public",
    "description": "",
    "lineNumber": 15,
    "type": {
      "types": [
        "string"
      ],
      "optional": false,
      "name": "TransactionSignature"
    }
  },
  {
    "__docId__": 187,
    "kind": "typedef",
    "name": "TransactionId",
    "memberof": "src/transaction.js",
    "static": true,
    "longname": "src/transaction.js~TransactionId",
    "access": "public",
    "description": "",
    "lineNumber": 20,
    "type": {
      "types": [
        "string"
      ],
      "optional": false,
      "name": "TransactionId"
    }
  },
  {
    "__docId__": 188,
    "kind": "variable",
    "name": "PACKET_DATA_SIZE",
    "memberof": "src/transaction.js",
    "static": true,
    "longname": "src/transaction.js~PACKET_DATA_SIZE",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{PACKET_DATA_SIZE}",
    "description": "Maximum over-the-wire size of a Transaction",
    "lineNumber": 25,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 189,
    "kind": "typedef",
    "name": "TransactionInstructionCtorFields",
    "memberof": "src/transaction.js",
    "static": true,
    "longname": "src/transaction.js~TransactionInstructionCtorFields",
    "access": "public",
    "description": "List of TransactionInstruction object fields that may be initialized at construction",
    "lineNumber": 35,
    "properties": [
      {
        "nullable": true,
        "types": [
          "Array<PublicKey>"
        ],
        "spread": false,
        "optional": false,
        "name": "keys",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "programId",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "userdata",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "TransactionInstructionCtorFields"
    }
  },
  {
    "__docId__": 190,
    "kind": "class",
    "name": "TransactionInstruction",
    "memberof": "src/transaction.js",
    "static": true,
    "longname": "src/transaction.js~TransactionInstruction",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{TransactionInstruction}",
    "description": "Transaction Instruction class",
    "lineNumber": 44,
    "interface": false
  },
  {
    "__docId__": 191,
    "kind": "member",
    "name": "keys",
    "memberof": "src/transaction.js~TransactionInstruction",
    "static": false,
    "longname": "src/transaction.js~TransactionInstruction#keys",
    "access": "public",
    "description": "Public keys to include in this transaction ",
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "Array<PublicKey>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 192,
    "kind": "member",
    "name": "programId",
    "memberof": "src/transaction.js~TransactionInstruction",
    "static": false,
    "longname": "src/transaction.js~TransactionInstruction#programId",
    "access": "public",
    "description": "Program Id to execute ",
    "lineNumber": 53,
    "type": {
      "nullable": null,
      "types": [
        "PublicKey"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 193,
    "kind": "member",
    "name": "userdata",
    "memberof": "src/transaction.js~TransactionInstruction",
    "static": false,
    "longname": "src/transaction.js~TransactionInstruction#userdata",
    "access": "public",
    "description": "Program input ",
    "lineNumber": 58,
    "type": {
      "nullable": null,
      "types": [
        "Buffer"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 194,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/transaction.js~TransactionInstruction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transaction.js~TransactionInstruction#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 60,
    "params": [
      {
        "nullable": null,
        "types": [
          "TransactionInstructionCtorFields"
        ],
        "spread": false,
        "optional": false,
        "name": "opts",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 195,
    "kind": "typedef",
    "name": "TransactionCtorFields",
    "memberof": "src/transaction.js",
    "static": true,
    "longname": "src/transaction.js~TransactionCtorFields",
    "access": "public",
    "description": "List of Transaction object fields that may be initialized at construction",
    "lineNumber": 82,
    "properties": [
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "fee",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "(?lastId}",
        "description": "A recent transaction id"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "(?signatures}",
        "description": "One or more signatures"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "TransactionCtorFields"
    }
  },
  {
    "__docId__": 196,
    "kind": "class",
    "name": "Transaction",
    "memberof": "src/transaction.js",
    "static": true,
    "longname": "src/transaction.js~Transaction",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{Transaction}",
    "description": "Transaction class",
    "lineNumber": 91,
    "interface": false
  },
  {
    "__docId__": 197,
    "kind": "member",
    "name": "signatures",
    "memberof": "src/transaction.js~Transaction",
    "static": false,
    "longname": "src/transaction.js~Transaction#signatures",
    "access": "public",
    "description": "Signatures for the transaction.  Typically created by invoking the\n`sign()` method ",
    "lineNumber": 96,
    "type": {
      "nullable": null,
      "types": [
        "Array<SignaturePubkeyPair>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 198,
    "kind": "get",
    "name": "signature",
    "memberof": "src/transaction.js~Transaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transaction.js~Transaction#signature",
    "access": "public",
    "description": "The first (primary) Transaction signature ",
    "lineNumber": 101,
    "type": {
      "nullable": null,
      "types": [
        "Buffer",
        "nullliteral"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 199,
    "kind": "member",
    "name": "instructions",
    "memberof": "src/transaction.js~Transaction",
    "static": false,
    "longname": "src/transaction.js~Transaction#instructions",
    "access": "public",
    "description": "The instructions to atomically execute ",
    "lineNumber": 111,
    "type": {
      "nullable": null,
      "types": [
        "Array<TransactionInstruction>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 200,
    "kind": "member",
    "name": "lastId",
    "memberof": "src/transaction.js~Transaction",
    "static": false,
    "longname": "src/transaction.js~Transaction#lastId",
    "access": "public",
    "description": "A recent transaction id.  Must be populated by the caller ",
    "lineNumber": 116,
    "type": {
      "nullable": true,
      "types": [
        "TransactionId"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 201,
    "kind": "member",
    "name": "fee",
    "memberof": "src/transaction.js~Transaction",
    "static": false,
    "longname": "src/transaction.js~Transaction#fee",
    "access": "public",
    "description": "Fee for this transaction ",
    "lineNumber": 121,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 202,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/transaction.js~Transaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transaction.js~Transaction#constructor",
    "access": "public",
    "description": "Construct an empty Transaction ",
    "lineNumber": 126,
    "params": [
      {
        "nullable": null,
        "types": [
          "TransactionCtorFields"
        ],
        "spread": false,
        "optional": false,
        "name": "opts",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 203,
    "kind": "method",
    "name": "add",
    "memberof": "src/transaction.js~Transaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transaction.js~Transaction#add",
    "access": "public",
    "description": "Add one or more instructions to this Transaction  ",
    "lineNumber": 133,
    "params": [
      {
        "nullable": null,
        "types": [
          "...Array<Transaction|TransactionInstructionCtorFields>"
        ],
        "spread": true,
        "optional": false,
        "name": "items",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Transaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 205,
    "kind": "method",
    "name": "_getSignData",
    "memberof": "src/transaction.js~Transaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transaction.js~Transaction#_getSignData",
    "access": "private",
    "description": "  ",
    "lineNumber": 153,
    "return": {
      "nullable": null,
      "types": [
        "Buffer"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true,
    "params": []
  },
  {
    "__docId__": 206,
    "kind": "method",
    "name": "sign",
    "memberof": "src/transaction.js~Transaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transaction.js~Transaction#sign",
    "access": "public",
    "description": "Sign the Transaction with the specified accounts.  Multiple signatures may\nbe applied to a Transaction. The first signature is considered \"primary\"\nand is used when testing for Transaction confirmation.\n\nTransaction fields should not be modified after the first call to `sign`,\nas doing so may invalidate the signature and cause the Transaction to be\nrejected.\n\nThe Transaction must be assigned a valid `lastId` before invoking this method ",
    "lineNumber": 267,
    "params": [
      {
        "nullable": null,
        "types": [
          "...Array<Account>"
        ],
        "spread": true,
        "optional": false,
        "name": "signers",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 207,
    "kind": "method",
    "name": "signPartial",
    "memberof": "src/transaction.js~Transaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transaction.js~Transaction#signPartial",
    "access": "public",
    "description": "Partially sign a Transaction with the specified accounts.  The `Account`\ninputs will be used to sign the Transaction immediately, while any\n`PublicKey` inputs will be referenced in the signed Transaction but need to\nbe filled in later by calling `addSigner()` with the matching `Account`.\n\nAll the caveats from the `sign` method apply to `signPartial` ",
    "lineNumber": 279,
    "params": [
      {
        "nullable": null,
        "types": [
          "...Array<PublicKey|Account>"
        ],
        "spread": true,
        "optional": false,
        "name": "partialSigners",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 209,
    "kind": "method",
    "name": "addSigner",
    "memberof": "src/transaction.js~Transaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transaction.js~Transaction#addSigner",
    "access": "public",
    "description": "Fill in a signature for a partially signed Transaction.  The `signer` must\nbe the corresponding `Account` for a `PublicKey` that was previously provided to\n`signPartial` ",
    "lineNumber": 316,
    "params": [
      {
        "nullable": null,
        "types": [
          "Account"
        ],
        "spread": false,
        "optional": false,
        "name": "signer",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 210,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/transaction.js~Transaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transaction.js~Transaction#serialize",
    "access": "public",
    "description": "Serialize the Transaction in the wire format.\n\nThe Transaction must have a valid `signature` before invoking this method  ",
    "lineNumber": 335,
    "return": {
      "nullable": null,
      "types": [
        "Buffer"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 211,
    "kind": "get",
    "name": "keys",
    "memberof": "src/transaction.js~Transaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transaction.js~Transaction#keys",
    "access": "private",
    "description": "Deprecated method ",
    "lineNumber": 364,
    "type": {
      "nullable": null,
      "types": [
        "Array<PublicKey>"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 212,
    "kind": "get",
    "name": "programId",
    "memberof": "src/transaction.js~Transaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transaction.js~Transaction#programId",
    "access": "private",
    "description": "Deprecated method ",
    "lineNumber": 373,
    "type": {
      "nullable": null,
      "types": [
        "PublicKey"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 213,
    "kind": "get",
    "name": "userdata",
    "memberof": "src/transaction.js~Transaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transaction.js~Transaction#userdata",
    "access": "private",
    "description": "Deprecated method ",
    "lineNumber": 382,
    "type": {
      "nullable": null,
      "types": [
        "Buffer"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 214,
    "kind": "file",
    "name": "src/util/send-and-confirm-raw-transaction.js",
    "content": "// @flow\n\nimport {Connection} from '../connection';\nimport {sleep} from './sleep';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a raw transaction\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n): Promise<TransactionSignature> {\n  const start = Date.now();\n  let signature = await connection.sendRawTransaction(rawTransaction);\n\n  // Wait up to a couple seconds for a confirmation\n  let status = '';\n  let statusRetries = 4;\n  for (;;) {\n    status = await connection.getSignatureStatus(signature);\n    if (status !== 'SignatureNotFound') {\n      break;\n    }\n\n    await sleep(500);\n    if (--statusRetries <= 0) {\n      const duration = (Date.now() - start) / 1000;\n      throw new Error(\n        `Raw Transaction '${signature}' was not confirmed in ${duration.toFixed(\n          2,\n        )} seconds (${status})`,\n      );\n    }\n  }\n\n  if (status === 'Confirmed') {\n    return signature;\n  }\n\n  throw new Error(`Raw transaction ${signature} failed (${status})`);\n}\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/util/send-and-confirm-raw-transaction.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 215,
    "kind": "function",
    "name": "sendAndConfirmRawTransaction",
    "memberof": "src/util/send-and-confirm-raw-transaction.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/util/send-and-confirm-raw-transaction.js~sendAndConfirmRawTransaction",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{sendAndConfirmRawTransaction}",
    "description": "Sign, send and confirm a raw transaction",
    "lineNumber": 10,
    "params": [
      {
        "name": "connection",
        "types": [
          "*"
        ]
      },
      {
        "name": "rawTransaction",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 216,
    "kind": "file",
    "name": "src/util/send-and-confirm-transaction.js",
    "content": "// @flow\n\nimport invariant from 'assert';\n\nimport {Connection} from '../connection';\nimport {Transaction} from '../transaction';\nimport {sleep} from './sleep';\nimport type {Account} from '../account';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  ...signers: Array<Account>\n): Promise<TransactionSignature> {\n  let sendRetries = 10;\n  let signature;\n  for (;;) {\n    const start = Date.now();\n    signature = await connection.sendTransaction(transaction, ...signers);\n\n    // Wait up to a couple seconds for a confirmation\n    let status = 'SignatureNotFound';\n    let statusRetries = 4;\n    for (;;) {\n      status = await connection.getSignatureStatus(signature);\n      if (status !== 'SignatureNotFound') {\n        break;\n      }\n\n      await sleep(500);\n      if (--statusRetries <= 0) {\n        const duration = (Date.now() - start) / 1000;\n        throw new Error(\n          `Transaction '${signature}' was not confirmed in ${duration.toFixed(\n            2,\n          )} seconds (${status})`,\n        );\n      }\n    }\n\n    if (status === 'Confirmed') {\n      break;\n    }\n\n    if (status !== 'AccountInUse' || --sendRetries <= 0) {\n      throw new Error(`Transaction ${signature} failed (${status})`);\n    }\n\n    // Retry in 0..100ms to try to avoid another collision\n    await sleep(Math.random() * 100);\n  }\n\n  invariant(signature !== undefined);\n  return signature;\n}\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/util/send-and-confirm-transaction.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 217,
    "kind": "function",
    "name": "sendAndConfirmTransaction",
    "memberof": "src/util/send-and-confirm-transaction.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/util/send-and-confirm-transaction.js~sendAndConfirmTransaction",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{sendAndConfirmTransaction}",
    "description": "Sign, send and confirm a transaction",
    "lineNumber": 14,
    "params": [
      {
        "name": "connection",
        "types": [
          "*"
        ]
      },
      {
        "name": "transaction",
        "types": [
          "*"
        ]
      },
      {
        "name": "signers",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 218,
    "kind": "file",
    "name": "src/util/sleep.js",
    "content": "// @flow\n\n// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/util/sleep.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 219,
    "kind": "function",
    "name": "sleep",
    "memberof": "src/util/sleep.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util/sleep.js~sleep",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{sleep}",
    "description": " ",
    "lineNumber": 4,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "ms",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "kind": "index",
    "content": "[![Build status][travis-image]][travis-url]\n[![codecov][codecov-image]][codecov-url]\n[![esdoc][esdoc-image]][esdoc-url]\n<br>\n[![npm][npm-image]][npm-url]\n[![npm-downloads][npm-downloads-image]][npm-url]\n[![david][david-deps-image]][david-deps-url]\n[![david][david-dev-deps-image]][david-dev-deps-url]\n<br>\n[![semantic-release][semantic-release-image]][semantic-release-url]\n[![code-style-prettier][code-style-prettier-image]][code-style-prettier-url]\n\n[travis-image]: https://api.travis-ci.org/solana-labs/solana-web3.js.svg?branch=master\n[travis-url]: https://travis-ci.org/solana-labs/solana-web3.js\n[codecov-image]: https://codecov.io/gh/solana-labs/solana-web3.js/branch/master/graph/badge.svg\n[codecov-url]: https://codecov.io/gh/solana-labs/solana-web3.js\n[esdoc-image]: https://solana-labs.github.io/solana-web3.js/badge.svg\n[npm-image]: https://img.shields.io/npm/v/@solana/web3.js.svg?style=flat\n[npm-downloads-image]: https://img.shields.io/npm/dm/@solana/web3.js.svg?style=flat\n[esdoc-url]: https://solana-labs.github.io/solana-web3.js/\n[npm-url]: https://www.npmjs.com/package/@solana/web3.js\n[david-deps-image]: https://david-dm.org/solana-labs/solana-web3.js.svg\n[david-deps-url]: https://david-dm.org/solana-labs/solana-web3.js\n[david-dev-deps-image]: https://david-dm.org/solana-labs/solana-web3.js/dev-status.svg\n[david-dev-deps-url]: https://david-dm.org/solana-labs/solana-web3.js?type=dev\n[semantic-release-image]: https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg\n[semantic-release-url]: https://github.com/semantic-release/semantic-release\n[code-style-prettier-image]: https://img.shields.io/badge/code_style-prettier-ff69b4.svg?style=flat-square\n[code-style-prettier-url]: https://github.com/prettier/prettier\n\n# Solana JavaScript API\n\nThis is the Solana Javascript API built on the Solana [JSON RPC API](https://github.com/solana-labs/solana/blob/master/doc/json-rpc.md)\n\n[Latest API Documentation](https://solana-labs.github.io/solana-web3.js/)\n\n\n## Installation\n\n### Yarn\n```\n$ yarn add @solana/web3.js\n```\n\n### npm\n```\n$ npm install --save @solana/web3.js\n```\n\n### Browser bundle\n```html\n<script src=\"https://github.com/solana-labs/solana-web3.js/releases/download/v0.0.6/solanaWeb3.min.js\"></script>\n```\n\n### BPF program development\nclang-7.0 must be installed to build BPF programs, such as\n`examples/bpf-c-noop/`.  See `bpf-sdk/README.md` for installation details\n\n## Usage\n\n### Javascript\n```js\nconst solanaWeb3 = require('@solana/web3.js');\nconsole.log(solanaWeb3);\n```\n\n### ES6\n```js\nimport solanaWeb3 from '@solana/web3.js';\nconsole.log(solanaWeb3);\n```\n\n### Browser bundle\n```js\n// `solanaWeb3` is provided in the global namespace by the `solanaWeb3.min.js` script bundle.\nconsole.log(solanaWeb3);\n```\n\n## Local Network\nThe `solana-localnet` program is provided to easily start a test Solana network\nlocally on your machine.  Docker must be installed.  The JSON RPC endpoint of\nthe local network is `http://localhost:8899`.\n\nTo start, first fetch the latest Docker image by running:\n```bash\n$ npx solana-localnet update\n```\n\nThen run the following command to start the network\n```bash\n$ npx solana-localnet up\n```\n\nWhile the network is running logs are available with:\n```bash\n$ npx solana-localnet logs -f\n```\n\nStop the network with:\n```bash\n$ npx solana-localnet down\n```\n\n## Flow\n\nA [Flow library definition](https://flow.org/en/docs/libdefs/) is provided at\n[module.flow.js](https://github.com/solana-labs/solana-web3.js/tree/master/module.flow.js).\nAdd the following line under the [libs] section of your project's .flowconfig to\nactivate it:\n```ini\n[libs]\nnode_modules/@solana/web3.js/module.flow.js\n```\n\n## Examples\nSee the [examples/](https://github.com/solana-labs/solana-web3.js/tree/master/examples) directory for small snippets.\n\nStandalone examples:\n* Web wallet: https://github.com/solana-labs/example-webwallet\n* Tic-tac-toe: https://github.com/solana-labs/example-tictactoe\n\n## Releases\nReleases are available on [Github](https://github.com/solana-labs/solana-web3.js/releases)\nand [npmjs.com](https://www.npmjs.com/package/@solana/web3.js)\n\nEach Github release features a tarball containing API documentation and a\nminified version of the module suitable for direct use in a browser environment\n(&lt;script&gt; tag)\n",
    "longname": "/home/travis/build/solana-labs/solana-web3.js/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"@solana/web3.js\",\n  \"version\": \"0.0.0-development\",\n  \"description\": \"Solana Javascript API\",\n  \"keywords\": [\n    \"api\",\n    \"blockchain\"\n  ],\n  \"license\": \"MIT\",\n  \"author\": \"Solana Labs, Inc\",\n  \"homepage\": \"https://solana.com/\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/solana-labs/solana-web3.js.git\"\n  },\n  \"bugs\": {\n    \"url\": \"http://github.com/solana-labs/solana-web3.js.git/issues\"\n  },\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"main\": \"lib/index.cjs.js\",\n  \"module\": \"lib/index.esm.js\",\n  \"bin\": {\n    \"solana-localnet\": \"bin/localnet.sh\"\n  },\n  \"solana-channel\": \"edge\",\n  \"files\": [\n    \"/bin\",\n    \"/doc\",\n    \"/examples\",\n    \"/bpf-sdk\",\n    \"/lib\",\n    \"/module.flow.js\",\n    \"/src\"\n  ],\n  \"scripts\": {\n    \"bpf-sdk:install\": \"set -ex; npm run bpf-sdk:fetch; npm run bpf-sdk:extract\",\n    \"bpf-sdk:extract\": \"test -d bpf-sdk || tar jxvf bpf-sdk.tar.bz2\",\n    \"bpf-sdk:fetch\": \"test -f bpf-sdk.tar.bz2 || curl http://solana-sdk.s3.amazonaws.com/$npm_package_solana_channel/bpf-sdk.tar.bz2 -o bpf-sdk.tar.bz2\",\n    \"bpf-sdk:remove-symlinks\": \"find bpf-sdk -type l -print -exec cp {} {}.tmp \\\\; -exec mv {}.tmp {} \\\\;\",\n    \"build\": \"cross-env NODE_ENV=production rollup -c\",\n    \"clean\": \"rimraf ./coverage ./lib\",\n    \"codecov\": \"set -ex; npm run test:cover; cat ./coverage/lcov.info | codecov\",\n    \"dev\": \"cross-env NODE_ENV=development rollup -c\",\n    \"doc\": \"set -ex; esdoc; node -p '\\\"\\\\nDocumentation coverage: \\\" + require(\\\"./doc/coverage.json\\\").coverage'\",\n    \"doc:watch\": \"watch 'npm run doc' . --wait=1 --ignoreDirectoryPattern=/doc/\",\n    \"examples\": \"set -ex; for example in examples/*.js; do node $example; done\",\n    \"flow\": \"set -ex; flow stop; flow-typed install jest@22; flow\",\n    \"flow:stop\": \"flow stop\",\n    \"flow:watch\": \"flow stop; watch 'flow' . --wait=1 --ignoreDirectoryPattern=/doc/\",\n    \"install\": \"npm run bpf-sdk:install\",\n    \"lint\": \"set -ex; npm run pretty; eslint .\",\n    \"lint:fix\": \"npm run lint -- --fix\",\n    \"lint:watch\": \"watch 'npm run lint:fix' . --wait=1 --ignoreDirectoryPattern=/doc/\",\n    \"localnet:down\": \"bin/localnet.sh down\",\n    \"localnet:logs\": \"bin/localnet.sh logs -f\",\n    \"localnet:up\": \"bin/localnet.sh up $npm_package_solana_channel\",\n    \"localnet:update\": \"bin/localnet.sh update $npm_package_solana_channel\",\n    \"ok\": \"set -ex; npm run lint; npm run flow; npm run test; npm run doc\",\n    \"prepare\": \"set -ex; npm run clean; npm run bpf-sdk:install; npm run build; rm -rf bpf-sdk; npm rum bpf-sdk:extract; npm run bpf-sdk:remove-symlinks\",\n    \"pretty\": \"prettier --write '{,{examples,src,test}/**/}*.js'\",\n    \"re\": \"semantic-release --repository-url git@github.com:solana-labs/solana-web3.js.git\",\n    \"test\": \"cross-env NODE_ENV=test jest --useStderr\",\n    \"test:cover\": \"cross-env NODE_ENV=test jest --coverage --useStderr\",\n    \"test:live\": \"cross-env NODE_ENV=test TEST_LIVE=1 jest --useStderr\",\n    \"test:watch\": \"cross-env NODE_ENV=test jest --watch --useStderr\"\n  },\n  \"dependencies\": {\n    \"babel-runtime\": \"^6.26.0\",\n    \"bn.js\": \"^4.11.8\",\n    \"bs58\": \"^4.0.1\",\n    \"buffer-layout\": \"^1.2.0\",\n    \"esdoc-inject-style-plugin\": \"^1.0.0\",\n    \"jayson\": \"^2.0.6\",\n    \"mz\": \"^2.7.0\",\n    \"node-fetch\": \"^2.2.0\",\n    \"rpc-websockets\": \"^4.3.3\",\n    \"superstruct\": \"^0.6.0\",\n    \"tweetnacl\": \"^1.0.0\",\n    \"ws\": \"^6.1.0\"\n  },\n  \"devDependencies\": {\n    \"babel-core\": \"6.26.3\",\n    \"babel-eslint\": \"10.0.1\",\n    \"babel-plugin-module-resolver\": \"3.1.1\",\n    \"babel-plugin-transform-runtime\": \"^6.23.0\",\n    \"babel-preset-env\": \"1.7.0\",\n    \"babel-preset-flow\": \"6.23.0\",\n    \"babel-preset-stage-0\": \"6.24.1\",\n    \"codecov\": \"^3.0.4\",\n    \"cross-env\": \"5.2.0\",\n    \"elfy\": \"^0.1.0\",\n    \"enzyme\": \"3.7.0\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n    \"esdoc-flow-type-plugin\": \"^1.1.0\",\n    \"esdoc-importpath-plugin\": \"^1.0.2\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"eslint\": \"5.9.0\",\n    \"eslint-config-prettier\": \"^3.1.0\",\n    \"eslint-plugin-import\": \"2.14.0\",\n    \"eslint-plugin-jest\": \"22.1.0\",\n    \"eslint-plugin-prettier\": \"^3.0.0\",\n    \"flow-bin\": \"0.87.0\",\n    \"flow-typed\": \"2.5.1\",\n    \"fs-file-tree\": \"1.0.6\",\n    \"jest\": \"23.6.0\",\n    \"marked\": \"^0.5.1\",\n    \"prettier\": \"^1.14.3\",\n    \"rimraf\": \"2.6.2\",\n    \"rollup\": \"0.67.3\",\n    \"rollup-plugin-babel\": \"3.0.3\",\n    \"rollup-plugin-commonjs\": \"9.2.0\",\n    \"rollup-plugin-json\": \"^3.0.0\",\n    \"rollup-plugin-node-builtins\": \"^2.1.2\",\n    \"rollup-plugin-node-globals\": \"^1.2.1\",\n    \"rollup-plugin-node-resolve\": \"3.4.0\",\n    \"rollup-plugin-replace\": \"2.1.0\",\n    \"rollup-plugin-uglify\": \"3.0.0\",\n    \"semantic-release\": \"^15.9.16\",\n    \"watch\": \"^1.0.2\"\n  }\n}\n",
    "longname": "/home/travis/build/solana-labs/solana-web3.js/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]